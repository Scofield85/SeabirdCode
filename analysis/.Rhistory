i
as.numeric(data[[6633]][-c(32:33)])
data[[6633]]
data[[6632]]
appply(data[,-c(32,33)],2,as.numeric)
apply(data[,-c(32,33)],2,as.numeric)
head(apply(data[,-c(32,33)],2,as.numeric))
data[,-c(32,33)] <- appply(data[,-c(32,33)],2,as.numeric)
data[,-c(32,33)] <- apply(data[,-c(32,33)],2,as.numeric)
head(data)
data <- as.data.frame(data)
data[,-c(32,33)] <- apply(data[,-c(32,33)],2,as.numeric)
head(data)
dfNames <- c("UTC","latitude","DDLat","longitude","DDLong","scan.count","pressure","depth","temp","cond","DO.43.mg.L","DO43...sat","DO.optode","optode.T","BAT","fpb_year","fpb_month","fby_day","fby_hour","fby_min","fby_second","depth.1","temp.1","green","bluegreen","diatom","crypto","unused","unused.1","unused.2","YS","total","transmission","pf_date","pf_time","Fo","Fm","blank","Fv","Yield","BIN7","BIN8","BIN9","BIN10","BIN11","BIN12","BIN13","BIN14","BIN15","BIN16","BIN17","BIN18","BIN19","BIN20","BIN21","BIN22","BIN23","BIN24","BIN25","BIN26","BIN27","BIN28","BIN29","BIN30","BIN31","BIN32","BIN33","BIN34","BIN35","BIN36","BIN37","BIN38","BIN39","BIN40","BIN41","BIN42","BIN43","BIN44","BIN45","BIN46","BIN47","BIN48","BIN49","BIN50","BIN51","BIN52","BIN53","BIN54","BIN55","BIN56","BIN57","BIN58","BIN59","BIN60","BIN61","BIN62","BIN63","BIN64","BIN65","BIN66","BIN67","BIN68","BIN69","BIN70","BIN71","BIN72","BIN73","BIN74","BIN75","BIN76","BIN77","BIN78","BIN79","BIN80","BIN81","BIN82","BIN83","BIN84","BIN85","BIN86","BIN87","BIN88","BIN89","BIN90","BIN91","BIN92","BIN93","BIN94","BIN95","BIN96","BIN97","BIN98","BIN99","BIN100","BIN101","BIN102","BIN103","BIN104","BIN105","BIN106","BIN107","BIN108","BIN109","BIN110","BIN111","BIN112","BIN113","BIN114","BIN115","BIN116","BIN117","BIN118","BIN119","BIN120","BIN121","BIN122","BIN123","BIN124","BIN125","BIN126","BIN127","BIN128","Snapshot","threshold","SampleNumber","FlowCounts","DeltaTime","BufferOverrun","LaserMonitor","ElectronicCounts","CountPeriod","LaserVoltage")
length(dfNames)
dim(data)
dfNames <- c("UTC","latitude","longitude","scan.count","pressure","depth","temp","cond","DO.43.mg.L","DO43...sat","DO.optode","optode.T","BAT","fpb_year","fpb_month","fby_day","fby_hour","fby_min","fby_second","depth.1","temp.1","green","bluegreen","diatom","crypto","unused","unused.1","unused.2","YS","total","transmission","pf_date","pf_time","Fo","Fm","blank","Fv","Yield","BIN1","BIN2","BIN3","BIN4","BIN5","BIN6","BIN7","BIN8","BIN9","BIN10","BIN11","BIN12","BIN13","BIN14","BIN15","BIN16","BIN17","BIN18","BIN19","BIN20","BIN21","BIN22","BIN23","BIN24","BIN25","BIN26","BIN27","BIN28","BIN29","BIN30","BIN31","BIN32","BIN33","BIN34","BIN35","BIN36","BIN37","BIN38","BIN39","BIN40","BIN41","BIN42","BIN43","BIN44","BIN45","BIN46","BIN47","BIN48","BIN49","BIN50","BIN51","BIN52","BIN53","BIN54","BIN55","BIN56","BIN57","BIN58","BIN59","BIN60","BIN61","BIN62","BIN63","BIN64","BIN65","BIN66","BIN67","BIN68","BIN69","BIN70","BIN71","BIN72","BIN73","BIN74","BIN75","BIN76","BIN77","BIN78","BIN79","BIN80","BIN81","BIN82","BIN83","BIN84","BIN85","BIN86","BIN87","BIN88","BIN89","BIN90","BIN91","BIN92","BIN93","BIN94","BIN95","BIN96","BIN97","BIN98","BIN99","BIN100","BIN101","BIN102","BIN103","BIN104","BIN105","BIN106","BIN107","BIN108","BIN109","BIN110","BIN111","BIN112","BIN113","BIN114","BIN115","BIN116","BIN117","BIN118","BIN119","BIN120","BIN121","BIN122","BIN123","BIN124","BIN125","BIN126","BIN127","BIN128","Snapshot","threshold","SampleNumber","FlowCounts","DeltaTime","BufferOverrun","LaserMonitor","ElectronicCounts","CountPeriod","LaserVoltage")
length(dfNames)
dim(data)
?seq
data$timePassSecond <- seq(0,length.out = nrow(data),by = 0.5)
head(data)
data <- na.rm(data)
names(data) <- dfNames
data$timePassSecond <- seq(0,length.out = nrow(data),by = 0.5)
head(data)
qplot(1:nrow(data),-depth.1,color=total)
qplot(1:nrow(data),-depth.1,color=total,data=data)
qplot(1:nrow(data),-depth.1,color=total,data=data)+scale_color_gradientn(colors=topo.colors(10),limit=c(0,10))
qplot(1:nrow(data),-depth,color=total,data=data)+scale_color_gradientn(colors=topo.colors(10),limit=c(0,10))
qplot(1:nrow(data),-depth.1,color=total,data=data)+scale_color_gradientn(colors=topo.colors(10),limit=c(0,10))
head(Fluoroprobe)
qplot(1:nrow(Fluoroprobe),color=Fluoroprobe[,7],color=Fluoroprobe[,17],data=Fluoroprobe)+scale_color_gradientn(colors=topo.colors(10),limit=c(0,10))
qplot(1:nrow(Fluoroprobe),color=Fluoroprobe[,7],color=Fluoroprobe[,17],data=Fluoroprobe)+
qplot(1:nrow(Fluoroprobe),color=Fluoroprobe[,7],color=Fluoroprobe[,17],data=Fluoroprobe)
qplot(1:nrow(Fluoroprobe),color=Fluoroprobe[,7],color=Fluoroprobe[,17])
qplot(1:nrow(Fluoroprobe),Fluoroprobe[,7],color=Fluoroprobe[,17])
qplot(1:nrow(Fluoroprobe),-Fluoroprobe[,7],color=Fluoroprobe[,17])
qplot(1:nrow(Fluoroprobe),-Fluoroprobe[,7],color=Fluoroprobe[,17])+scale_color_gradientn(colors=topo.colors(10),limit=c(0,10))
qplot(1:nrow(data),-depth,color=total,data=data)+scale_color_gradientn(colors=topo.colors(10),limit=c(0,10))
qplot(1:nrow(data),-depth.1,color=total,data=data)+scale_color_gradientn(colors=topo.colors(10),limit=c(0,10))
qplot(1:nrow(data),-depth.1,data=data)+geom_line()+geom_line(aes(x=1:nrow(data),y=-depth),data=data)
qplot(1:nrow(data),-depth.1,data=data)+geom_line()+geom_line(aes(x=1:nrow(data),y=-depth),data=data,color=I("red"))
a <- paste(sampleDate,data$UTC,sep=" ")
sampleDate <- lines[[2]][c(5,6,8)]
sampleDate <- as.Date(paste(sampleDate,collapse = "_"),format = "%B_%d_%Y")
a <- paste(sampleDate,data$UTC,sep=" ")
head(a)
data <- na.omit(data)
names(data) <- dfNames
data$timePassSecond <- seq(0,length.out = nrow(data),by = 0.5)
a <- paste(sampleDate,data$UTC,sep=" ")
head(a)
sprintf("%05s", data$UTC)
sprintf("%05s", data$UTC)[1]
sprintf("%05s", "11916")
sprintf("%06s", "11916")
data$UTC <- strptime(paste(sampleDate,sprintf("%06s", data$UTC),sep=" "),format = "%Y-%m-%d %H%M%S",tz = "UTC")
head(data$UTC)
plot(diff(data$UTC))
plot(data$UTC)
data$UTC
which.max(diff(data$UTC))
data$UTC[1511]
data$UTC[1512]
hour(data)
hour(data$UTC)
?hour
??hour
hours(data$UTC)
library(lubridate)
hours(data$UTC)
hour(data$UTC)
hours_diff <- diff(hour(data$UTC))
head(hour_diff)
head(hours_diff)
which(diff(hour(data$UTC))<0)
data$UTC[1503]
data$UTC[1504]
plot(data$depth[1:1503])
plot(data$depth[1:1506])
plot(data$depth[1:1510])
data$pf_date[1503]
data$pf_date[1505]
data[1503]
data[1503,]
data[1504,]
plot(as.numeric(data$UTC))
plot(1:nrow(data),as.numeric(data$UTC))
plot(as.numeric(data$UTC)[1000:2000])
plot(as.numeric(data$UTC)[1400:1600])
diff(data$UTC[-c(1400:1600)])
plot(diff(data$UTC[-c(1400:1600)]))
data[,c()]
data[,c("UTC","timePassSecond")]
rm(list=ls())
library(reshape2)
library(dplyr)
library(ggplot2)
library(plotly)
require(gridExtra)
source("data.R")
source("EDA.R")
# source("labDataExplore.R")
source("plot.R")
source("ML.R")
source("global.R")
feature <- readFeature()
head(feature)
summary(feature)
unique(feature$site)
feature$num_segment
feature$num_segment[feature$site == "SU01",]
feature[feature$site == "SU01"]$num_segment
feature[feature$site == "SU01",]$num_segment
plot_gly(feature,"num_segment")
rm(list=ls())
library(reshape2)
library(dplyr)
library(ggplot2)
library(plotly)
require(gridExtra)
source("data.R")
source("EDA.R")
# source("labDataExplore.R")
source("plot.R")
source("ML.R")
source("global.R")
feature <- readFeature()
MDS(feature,distanceFeature = waterChemistryVariables,targetFeature = "DCL_depth",site = "SU04",outlier = TRUE)
feature <- read.csv("../../output/detectedFeatures.csv")
head(feature)
feature <- read.csv("../../output/testFeature.csv")
feature <- read.csv("../../output/detectedFeatures.csv")
validStation <- read.csv("../../input/station_loc.csv")
feature <- read.csv("../../output/detectedFeatures.csv")
validStation <- read.csv("../../input/station_loc.csv")
head(feature)
head(feature)
features <- read.csv("../../output/detectedFeatures.csv") %>% preprocessing()
locations <- read.csv("../../input/station_loc.csv")
expertNotes <- read.csv("../../input/All_Lakes_through2012.csv")
# construct all possible data combination
yearRange <- unique(features$year)
siteRange <- unique(locations$Station)
fullRange <- expand.grid(year = yearRange,site = siteRange)
head(feature)
preprocessing <- function(features){
# make consistent of the site name
ind_MI18M <- which(features$site == "MI18M")
ind_ER15M <- which(features$site == "ER15M")
features[ind_MI18M,"site"] = "MI18"
features[ind_ER15M,"site"] = "ER15"
features$lake <- substr(features$site,1,2)
return(features)
}
features <- read.csv("../../output/detectedFeatures.csv") %>% preprocessing()
locations <- read.csv("../../input/station_loc.csv")
library(dplyr)
features <- read.csv("../../output/detectedFeatures.csv") %>% preprocessing()
head(features)
head(feature)
features$TRM_diff <- features$TRM_segment-features$expert_TRM
features$LEP_diff <- features$LEP_segment-features$expert_LEP
features$UHY_diff <- features$UHY_segment-features$expert_UHY
head(features$TRM_diff)
boxplot(features$TRM_diff)
library(ggplot2)
rm(feature)
qplot(lake,TRM_diff,data = features)+geom_boxplot()
# functions to summary statistics
feature_stat <- function(df,varName = "TRM"){
predVar <- paste(varName,"segment",sep = "_")
expertVar <- paste("expert",varName, sep = "_")
expertExist <- !is.na(df[,expertVar])
predExist <- !is.na(df[,predVar])
df$only_pred <- predExist == TRUE & expertExist !=TRUE  # you only have expert
df$only_expert <- predExist == FALSE & expertExist == TRUE # you only have predication
res <- group_by(df,lake) %>% sumamrise(only_pred = sum(only_pred),only_expert = sum(only_expert))
print(res)
}
feature_stat(features)
# functions to summary statistics
feature_stat <- function(df,varName = "TRM"){
predVar <- paste(varName,"segment",sep = "_")
expertVar <- paste("expert",varName, sep = "_")
expertExist <- !is.na(df[,expertVar])
predExist <- !is.na(df[,predVar])
df$only_pred <- predExist == TRUE & expertExist !=TRUE  # you only have expert
df$only_expert <- predExist == FALSE & expertExist == TRUE # you only have predication
res <- group_by(df,lake) %>% summrise(only_pred = sum(only_pred),only_expert = sum(only_expert))
print(res)
}
feature_stat(features)
feature_stat <- function(df,varName = "TRM"){
predVar <- paste(varName,"segment",sep = "_")
expertVar <- paste("expert",varName, sep = "_")
expertExist <- !is.na(df[,expertVar])
predExist <- !is.na(df[,predVar])
df$only_pred <- predExist == TRUE & expertExist !=TRUE  # you only have expert
df$only_expert <- predExist == FALSE & expertExist == TRUE # you only have predication
res <- group_by(df,lake) %>% summarise(only_pred = sum(only_pred),only_expert = sum(only_expert))
print(res)
}
feature_stat(features)
head(features)
features$experfeature_stat <- function(df,varName = "TRM"){
predVar <- paste(varName,"segment",sep = "_")
expertVar <- paste("expert",varName, sep = "_")
expertExist <- !is.na(df[,expertVar])
predExist <- !is.na(df[,predVar])
df$only_pred <- predExist == TRUE & expertExist !=TRUE  # you only have expert
df$only_expert <- predExist == FALSE & expertExist == TRUE # you only have predication
res <- group_by(df,lake) %>% summarise(totalN = n(),only_pred = sum(only_pred),only_expert = sum(only_expert))
print(res)
}
feature_stat <- function(df,varName = "TRM"){
predVar <- paste(varName,"segment",sep = "_")
expertVar <- paste("expert",varName, sep = "_")
expertExist <- !is.na(df[,expertVar])
predExist <- !is.na(df[,predVar])
df$only_pred <- predExist == TRUE & expertExist !=TRUE  # you only have expert
df$only_expert <- predExist == FALSE & expertExist == TRUE # you only have predication
res <- group_by(df,lake) %>% summarise(totalN = n(),only_pred = sum(only_pred),only_expert = sum(only_expert))
print(res)
}
feature_stat(features)
feature_stat(features,"LEP")
feature_stat(features,"UHY")
varName = "TRM"
diffVar <- paste(varName,"diff",sep ="_")
df <- features
qplot(lake,eval(diffVar),data = df)
eval(diffVar)
qplot(lake,df[,diffVar],data = df)
qplot(lake,df[,diffVar],data = df)+geom_boxplot()+geom_text(aes(lake,df[,diffVar],text = paste(site,year)),data =df)
qplot(lake,df[,diffVar],data = df)+geom_boxplot()+geom_text(aes(lake,df[,diffVar],label = paste(site,year)),data =df)
# functions to summary statistics
feature_stat <- function(df,varName = "TRM"){
predVar <- paste(varName,"segment",sep = "_")
expertVar <- paste("expert",varName, sep = "_")
diffVar <- paste(varName,"diff",sep ="_")
expertExist <- !is.na(df[,expertVar])
predExist <- !is.na(df[,predVar])
df$only_pred <- predExist == TRUE & expertExist !=TRUE  # you only have expert
df$only_expert <- predExist == FALSE & expertExist == TRUE # you only have predication
res <- group_by(df,lake) %>% summarise(totalN = n(),only_pred = sum(only_pred),only_expert = sum(only_expert))
print(res)
png(sprintf("../../output/%s_diff.png",varName))
print(qplot(lake,df[,diffVar],data = df)+geom_boxplot()+geom_text(aes(lake,df[,diffVar],label = paste(site,year)),data =df))
dev.off()
}
feature_stat(features)
feature_stat <- function(df,varName = "TRM"){
predVar <- paste(varName,"segment",sep = "_")
expertVar <- paste("expert",varName, sep = "_")
diffVar <- paste(varName,"diff",sep ="_")
expertExist <- !is.na(df[,expertVar])
predExist <- !is.na(df[,predVar])
df$only_pred <- predExist == TRUE & expertExist !=TRUE  # you only have expert
df$only_expert <- predExist == FALSE & expertExist == TRUE # you only have predication
res <- group_by(df,lake) %>% summarise(totalN = n(),only_pred = sum(only_pred),only_expert = sum(only_expert))
print(res)
png(sprintf("../../output/%s_diff.png",varName),width = 300,height = 1000)
print(qplot(lake,df[,diffVar],data = df)+geom_boxplot()+geom_text(aes(lake,df[,diffVar],label = paste(site,year)),data =df))
dev.off()
}
feature_stat(features)
subFeatures <- subset(features,year>1997)
feature_stat(subFeatures)
probably remove data before 1998 would be a good choice
feature_stat <- function(df,varName = "TRM"){
predVar <- paste(varName,"segment",sep = "_")
expertVar <- paste("expert",varName, sep = "_")
diffVar <- paste(varName,"diff",sep ="_")
expertExist <- !is.na(df[,expertVar])
predExist <- !is.na(df[,predVar])
df$only_pred <- predExist == TRUE & expertExist !=TRUE  # you only have expert
df$only_expert <- predExist == FALSE & expertExist == TRUE # you only have predication
res <- group_by(df,lake) %>% summarise(totalN = n(),only_pred = sum(only_pred),only_expert = sum(only_expert))
print(res)
pdf(sprintf("../../output/%s_diff.png",varName),width = 300,height = 2000)
print(qplot(lake,df[,diffVar],data = df)+geom_boxplot()+geom_text(aes(lake,df[,diffVar],label = paste(site,year)),data =df))
dev.off()
}
feature_stat(features)
# probably remove data before 1998 would be a good choice
feature_stat <- function(df,varName = "TRM"){
predVar <- paste(varName,"segment",sep = "_")
expertVar <- paste("expert",varName, sep = "_")
diffVar <- paste(varName,"diff",sep ="_")
expertExist <- !is.na(df[,expertVar])
predExist <- !is.na(df[,predVar])
df$only_pred <- predExist == TRUE & expertExist !=TRUE  # you only have expert
df$only_expert <- predExist == FALSE & expertExist == TRUE # you only have predication
res <- group_by(df,lake) %>% summarise(totalN = n(),only_pred = sum(only_pred),only_expert = sum(only_expert))
print(res)
pdf(sprintf("../../output/%s_diff.pdf",varName),width = 300,height = 2000)
print(qplot(lake,df[,diffVar],data = df)+geom_boxplot()+geom_text(aes(lake,df[,diffVar],label = paste(site,year)),data =df))
dev.off()
}
feature_stat(features)
# probably remove data before 1998 would be a good choice
feature_stat <- function(df,varName = "TRM"){
predVar <- paste(varName,"segment",sep = "_")
expertVar <- paste("expert",varName, sep = "_")
diffVar <- paste(varName,"diff",sep ="_")
expertExist <- !is.na(df[,expertVar])
predExist <- !is.na(df[,predVar])
df$only_pred <- predExist == TRUE & expertExist !=TRUE  # you only have expert
df$only_expert <- predExist == FALSE & expertExist == TRUE # you only have predication
res <- group_by(df,lake) %>% summarise(totalN = n(),only_pred = sum(only_pred),only_expert = sum(only_expert))
print(res)
pdf(sprintf("../../output/%s_diff.pdf",varName),width = 300,height = 1000)
print(qplot(lake,df[,diffVar],data = df)+geom_boxplot()+geom_text(aes(lake,df[,diffVar],label = paste(site,year)),data =df))
dev.off()
}
feature_stat(features)
# probably remove data before 1998 would be a good choice
feature_stat <- function(df,varName = "TRM"){
predVar <- paste(varName,"segment",sep = "_")
expertVar <- paste("expert",varName, sep = "_")
diffVar <- paste(varName,"diff",sep ="_")
expertExist <- !is.na(df[,expertVar])
predExist <- !is.na(df[,predVar])
df$only_pred <- predExist == TRUE & expertExist !=TRUE  # you only have expert
df$only_expert <- predExist == FALSE & expertExist == TRUE # you only have predication
res <- group_by(df,lake) %>% summarise(totalN = n(),only_pred = sum(only_pred),only_expert = sum(only_expert))
print(res)
pdf(sprintf("../../output/%s_diff.pdf",varName),height = 5, width = 3)
print(qplot(lake,df[,diffVar],data = df)+geom_boxplot()+geom_text(aes(lake,df[,diffVar],label = paste(site,year)),data =df))
dev.off()
}
feature_stat(features)
# probably remove data before 1998 would be a good choice
feature_stat <- function(df,varName = "TRM"){
predVar <- paste(varName,"segment",sep = "_")
expertVar <- paste("expert",varName, sep = "_")
diffVar <- paste(varName,"diff",sep ="_")
expertExist <- !is.na(df[,expertVar])
predExist <- !is.na(df[,predVar])
df$only_pred <- predExist == TRUE & expertExist !=TRUE  # you only have expert
df$only_expert <- predExist == FALSE & expertExist == TRUE # you only have predication
res <- group_by(df,lake) %>% summarise(totalN = n(),only_pred = sum(only_pred),only_expert = sum(only_expert))
print(res)
pdf(sprintf("../../output/%s_diff.pdf",varName),height = 500, width = 300)
print(qplot(lake,df[,diffVar],data = df)+geom_boxplot()+geom_text(aes(lake,df[,diffVar],label = paste(site,year)),data =df))
dev.off()
}
feature_stat(features)
feature_stat <- function(df,varName = "TRM"){
predVar <- paste(varName,"segment",sep = "_")
expertVar <- paste("expert",varName, sep = "_")
diffVar <- paste(varName,"diff",sep ="_")
expertExist <- !is.na(df[,expertVar])
predExist <- !is.na(df[,predVar])
df$only_pred <- predExist == TRUE & expertExist !=TRUE  # you only have expert
df$only_expert <- predExist == FALSE & expertExist == TRUE # you only have predication
res <- group_by(df,lake) %>% summarise(totalN = n(),only_pred = sum(only_pred),only_expert = sum(only_expert))
print(res)
pdf(sprintf("../../output/%s_diff.pdf",varName),height = 50, width = 30)
print(qplot(lake,df[,diffVar],data = df)+geom_boxplot()+geom_text(aes(lake,df[,diffVar],label = paste(site,year)),data =df))
dev.off()
}
feature_stat(features)
feature_stat(subFeatures)
feature_stat(subFeatures,"LEP")
feature_stat(subFeatures,"UHY")
features <- merge(features,locations,by.x = c("site"),by.y = "site",all.x=TRUE)
head(features)
head(local())
head(locations)
features <- merge(features,locations,by.x = "site",by.y = "Station",all.x=TRUE)
head(features)
plot_gly <- function(feature,variable){
feature <- arrange(feature,year)
feature[,variable] <- ifelse(feature[,variable]<0,NA,feature[,variable])
temp.gly <- glyphs(feature, "Long", "year", "Lat", variable , height=0.25,width = 0.5)
ggplot(temp.gly, ggplot2::aes(gx, gy, group = gid)) +add_ref_lines(temp.gly, color = "grey90") +add_ref_boxes(temp.gly, color = "grey90") +geom_path() + geom_point()+theme_bw() + labs(x = "", y = "")
}
plot_gly(features,"TRM_segment")
library(GGally)
library(ggplot2)
library(dplyr)
plot_gly(features,"TRM_segment")
plot_gly(subset(features,lake == "SU"),"TRM_segment")
library(leaflet)
head(locations)
visGeoLocations <- function(locations){
leaflet(data = locations) %>% addTiles() %>% addMarkers(~Long, ~Lat, popup = ~as.character(Station))
}
visGeoLocations(locations)
features <- read.csv("../../output/detectedFeatures.csv") %>% preprocessing()
locations <- read.csv("../../input/station_loc.csv")
locations$Long <- -locations$Long
expertNotes <- read.csv("../../input/All_Lakes_through2012.csv")
features <- merge(features,locations,by.x = "site",by.y = "Station",all.x=TRUE)
features$TRM_diff <- features$TRM_segment-features$expert_TRM
features$LEP_diff <- features$LEP_segment-features$expert_LEP
features$UHY_diff <- features$UHY_segment-features$expert_UHY
features <- rename(features,DCL_segment = DCL_depth)
head(locations)
visGeoLocations(locations)
plot_gly(subset(features,lake == "SU"),"TRM_segment")
unique(subset(features,lake == "SU")$site)
subset(features,site == "SU08" & year = 1996)
subset(features,site == "SU08" & year == 1996)
plot_gly(subset(features,lake == "SU" & year >1997),"TRM_segment")
subset(features,site == "SU10" & year == 2004)
plot_gly(subset(features,lake == "SU" & year >1997),"LEP_segment")
plot_gly(subset(features,lake == "SU" & year >1997),"UHY_segment")
features <- read.csv("../../output/detectedFeatures.csv") %>% preprocessing()
rm(list=ls())
library(dplyr)
library(reshape2)
library(ggplot2)
features <- read.csv("../../output/detectedFeatures.csv") %>% preprocessing()
source('~/Developer/Seabird/SeabirdCode/analysis/newMain.R')
head(features)
features <- subset(features, lake %in% c("ER","HU","SU","ON","MI"))
head(features)
features <- arrange(features,site,year)
head(features)
head(features)
plot_gly(subset(features,lake == "SU"),"TRM_segment")
library(GGally)
library(ggplot2)
library(dplyr)
plot_gly(subset(features,lake == "SU"),"TRM_segment")
source("./plot.R")
plot_gly(subset(features,lake == "SU"),"TRM_segment")
source('~/Developer/Seabird/SeabirdCode/analysis/newMain.R')
source('~/Developer/Seabird/SeabirdCode/analysis/newMain.R')
head(features)
source('~/Developer/Seabird/SeabirdCode/analysis/newMain.R')
head(features)
head(subset(features,lake == "SU"))
summary(subset(features,lake == "SU"))
which.max(subset(features,lake == "SU")[,"TRM_segment"])
subset(features,lake == "SU")[325,]
unique(features$site)
unique(features$lake)
subset(features,lake == "SU")$TRM_segment
summary(subset(features,lake == "SU")$TRM_segment)
plot(subset(features,site =="SU08"))
plot(subset(features,site =="SU08")$TRM_segment)
subset(features,site =="SU08"
)
summary(features)
SUData <- subset(features,lake == "SU")
head(SUData)
features_stat(features,varName = "TRM")
feature_stat(features,varName = "TRM")
feature_stat(features,varName = "LEP")
feature_stat(features,varName = "DCL")
head(features)
features$DCL_diff <- features$DCL_segment-features$expert_DCL
head(features$DCL_diff)
feature_stat(features,varName = "DCL")
subset(features,site == "SU15" & year == 1999)
plot_gly(subset(features,lake == "SU"),"TRM_segment")
dev.off()
plot_gly(subset(features,lake == "SU"),"TRM_segment")
dev.off()
dev.off()
plot_gly(subset(features,lake == "SU"),"TRM_segment")
source('~/Developer/Seabird/SeabirdCode/analysis/newMain.R')
features$DCL_diff <- features$DCL_segment-features$expert_DCL
source('~/Developer/Seabird/SeabirdCode/analysis/newMain.R')
source('~/Developer/Seabird/SeabirdCode/analysis/newMain.R')
dev.off()
dev.off()
source('~/Developer/Seabird/SeabirdCode/analysis/newMain.R')
dev.off()
plot_gly(subset(features,lake == "SU"),"TRM_segment")
plot_gly(subset(features,lake == "SU"),"DCL_segment")
plot_gly(subset(features,lake == "SU"),"DCL_magnitude")
head(features)
plot_gly(SUData,"DCL_conc")
plot_gly(SUData,"TRM_segment")
plot_gly(SUData,"LEP_segment")
plot_gly(SUData,"UHY_segment")
plot_gly(SUData,"DCL_segment")
# probably remove data before 1998 would be a good choice
feature_stat <- function(df,varName = "TRM"){
predVar <- paste(varName,"segment",sep = "_")
expertVar <- paste("expert",varName, sep = "_")
diffVar <- paste(varName,"diff",sep ="_")
expertExist <- !is.na(df[,expertVar])
predExist <- !is.na(df[,predVar])
df$only_pred <- predExist == TRUE & expertExist !=TRUE  # you only have expert
df$only_expert <- predExist == FALSE & expertExist == TRUE # you only have predication
df$pred_expert <- predExist == TRUE & expertExist == TRUE
res <- group_by(df,lake) %>% summarise(totalN = n(),only_pred = sum(only_pred),only_expert = sum(only_expert),allExist = sum(pred_expert))
print(res)
pdf(sprintf("../../output/%s_diff.pdf",varName),height = 50, width = 30)
print(qplot(lake,df[,diffVar],data = df)+geom_boxplot()+geom_text(aes(lake,df[,diffVar],label = paste(site,year)),data =df))
dev.off()
}
feature_stat(features,varName = "DCL")
feature_stat(features,varName = "TRM")
feature_stat(features,varName = "UHY")
feature_stat(features,varName = "LEP")
source('~/Developer/Seabird/SeabirdCode/analysis/newMain.R')
head(features)
only_expert_ind <- is.na(features$DCL_depth) & !is.na(features$expert_DCL)
features[only_expert_ind,]
features[only_expert_ind,c("site","year")]
features[only_expert_ind,c("site","year","fileId")]
head(features)
features[only_expert_ind,c("site","year","fileId","peakNums")]
write.csv(features[only_expert_ind,c("site","year","fileId","peakNums")],"DCL_missing.csv")
