feature <- readFeature()
MDS(feature,distanceFeature = waterChemistryVariables,targetFeature = "DCL_depth",site = "SU04",outlier = TRUE)
feature <- read.csv("../../output/detectedFeatures.csv")
head(feature)
feature <- read.csv("../../output/testFeature.csv")
feature <- read.csv("../../output/detectedFeatures.csv")
validStation <- read.csv("../../input/station_loc.csv")
feature <- read.csv("../../output/detectedFeatures.csv")
validStation <- read.csv("../../input/station_loc.csv")
head(feature)
head(feature)
features <- read.csv("../../output/detectedFeatures.csv") %>% preprocessing()
locations <- read.csv("../../input/station_loc.csv")
expertNotes <- read.csv("../../input/All_Lakes_through2012.csv")
# construct all possible data combination
yearRange <- unique(features$year)
siteRange <- unique(locations$Station)
fullRange <- expand.grid(year = yearRange,site = siteRange)
head(feature)
preprocessing <- function(features){
# make consistent of the site name
ind_MI18M <- which(features$site == "MI18M")
ind_ER15M <- which(features$site == "ER15M")
features[ind_MI18M,"site"] = "MI18"
features[ind_ER15M,"site"] = "ER15"
features$lake <- substr(features$site,1,2)
return(features)
}
features <- read.csv("../../output/detectedFeatures.csv") %>% preprocessing()
locations <- read.csv("../../input/station_loc.csv")
library(dplyr)
features <- read.csv("../../output/detectedFeatures.csv") %>% preprocessing()
head(features)
head(feature)
features$TRM_diff <- features$TRM_segment-features$expert_TRM
features$LEP_diff <- features$LEP_segment-features$expert_LEP
features$UHY_diff <- features$UHY_segment-features$expert_UHY
head(features$TRM_diff)
boxplot(features$TRM_diff)
library(ggplot2)
rm(feature)
qplot(lake,TRM_diff,data = features)+geom_boxplot()
# functions to summary statistics
feature_stat <- function(df,varName = "TRM"){
predVar <- paste(varName,"segment",sep = "_")
expertVar <- paste("expert",varName, sep = "_")
expertExist <- !is.na(df[,expertVar])
predExist <- !is.na(df[,predVar])
df$only_pred <- predExist == TRUE & expertExist !=TRUE  # you only have expert
df$only_expert <- predExist == FALSE & expertExist == TRUE # you only have predication
res <- group_by(df,lake) %>% sumamrise(only_pred = sum(only_pred),only_expert = sum(only_expert))
print(res)
}
feature_stat(features)
# functions to summary statistics
feature_stat <- function(df,varName = "TRM"){
predVar <- paste(varName,"segment",sep = "_")
expertVar <- paste("expert",varName, sep = "_")
expertExist <- !is.na(df[,expertVar])
predExist <- !is.na(df[,predVar])
df$only_pred <- predExist == TRUE & expertExist !=TRUE  # you only have expert
df$only_expert <- predExist == FALSE & expertExist == TRUE # you only have predication
res <- group_by(df,lake) %>% summrise(only_pred = sum(only_pred),only_expert = sum(only_expert))
print(res)
}
feature_stat(features)
feature_stat <- function(df,varName = "TRM"){
predVar <- paste(varName,"segment",sep = "_")
expertVar <- paste("expert",varName, sep = "_")
expertExist <- !is.na(df[,expertVar])
predExist <- !is.na(df[,predVar])
df$only_pred <- predExist == TRUE & expertExist !=TRUE  # you only have expert
df$only_expert <- predExist == FALSE & expertExist == TRUE # you only have predication
res <- group_by(df,lake) %>% summarise(only_pred = sum(only_pred),only_expert = sum(only_expert))
print(res)
}
feature_stat(features)
head(features)
features$experfeature_stat <- function(df,varName = "TRM"){
predVar <- paste(varName,"segment",sep = "_")
expertVar <- paste("expert",varName, sep = "_")
expertExist <- !is.na(df[,expertVar])
predExist <- !is.na(df[,predVar])
df$only_pred <- predExist == TRUE & expertExist !=TRUE  # you only have expert
df$only_expert <- predExist == FALSE & expertExist == TRUE # you only have predication
res <- group_by(df,lake) %>% summarise(totalN = n(),only_pred = sum(only_pred),only_expert = sum(only_expert))
print(res)
}
feature_stat <- function(df,varName = "TRM"){
predVar <- paste(varName,"segment",sep = "_")
expertVar <- paste("expert",varName, sep = "_")
expertExist <- !is.na(df[,expertVar])
predExist <- !is.na(df[,predVar])
df$only_pred <- predExist == TRUE & expertExist !=TRUE  # you only have expert
df$only_expert <- predExist == FALSE & expertExist == TRUE # you only have predication
res <- group_by(df,lake) %>% summarise(totalN = n(),only_pred = sum(only_pred),only_expert = sum(only_expert))
print(res)
}
feature_stat(features)
feature_stat(features,"LEP")
feature_stat(features,"UHY")
varName = "TRM"
diffVar <- paste(varName,"diff",sep ="_")
df <- features
qplot(lake,eval(diffVar),data = df)
eval(diffVar)
qplot(lake,df[,diffVar],data = df)
qplot(lake,df[,diffVar],data = df)+geom_boxplot()+geom_text(aes(lake,df[,diffVar],text = paste(site,year)),data =df)
qplot(lake,df[,diffVar],data = df)+geom_boxplot()+geom_text(aes(lake,df[,diffVar],label = paste(site,year)),data =df)
# functions to summary statistics
feature_stat <- function(df,varName = "TRM"){
predVar <- paste(varName,"segment",sep = "_")
expertVar <- paste("expert",varName, sep = "_")
diffVar <- paste(varName,"diff",sep ="_")
expertExist <- !is.na(df[,expertVar])
predExist <- !is.na(df[,predVar])
df$only_pred <- predExist == TRUE & expertExist !=TRUE  # you only have expert
df$only_expert <- predExist == FALSE & expertExist == TRUE # you only have predication
res <- group_by(df,lake) %>% summarise(totalN = n(),only_pred = sum(only_pred),only_expert = sum(only_expert))
print(res)
png(sprintf("../../output/%s_diff.png",varName))
print(qplot(lake,df[,diffVar],data = df)+geom_boxplot()+geom_text(aes(lake,df[,diffVar],label = paste(site,year)),data =df))
dev.off()
}
feature_stat(features)
feature_stat <- function(df,varName = "TRM"){
predVar <- paste(varName,"segment",sep = "_")
expertVar <- paste("expert",varName, sep = "_")
diffVar <- paste(varName,"diff",sep ="_")
expertExist <- !is.na(df[,expertVar])
predExist <- !is.na(df[,predVar])
df$only_pred <- predExist == TRUE & expertExist !=TRUE  # you only have expert
df$only_expert <- predExist == FALSE & expertExist == TRUE # you only have predication
res <- group_by(df,lake) %>% summarise(totalN = n(),only_pred = sum(only_pred),only_expert = sum(only_expert))
print(res)
png(sprintf("../../output/%s_diff.png",varName),width = 300,height = 1000)
print(qplot(lake,df[,diffVar],data = df)+geom_boxplot()+geom_text(aes(lake,df[,diffVar],label = paste(site,year)),data =df))
dev.off()
}
feature_stat(features)
subFeatures <- subset(features,year>1997)
feature_stat(subFeatures)
probably remove data before 1998 would be a good choice
feature_stat <- function(df,varName = "TRM"){
predVar <- paste(varName,"segment",sep = "_")
expertVar <- paste("expert",varName, sep = "_")
diffVar <- paste(varName,"diff",sep ="_")
expertExist <- !is.na(df[,expertVar])
predExist <- !is.na(df[,predVar])
df$only_pred <- predExist == TRUE & expertExist !=TRUE  # you only have expert
df$only_expert <- predExist == FALSE & expertExist == TRUE # you only have predication
res <- group_by(df,lake) %>% summarise(totalN = n(),only_pred = sum(only_pred),only_expert = sum(only_expert))
print(res)
pdf(sprintf("../../output/%s_diff.png",varName),width = 300,height = 2000)
print(qplot(lake,df[,diffVar],data = df)+geom_boxplot()+geom_text(aes(lake,df[,diffVar],label = paste(site,year)),data =df))
dev.off()
}
feature_stat(features)
# probably remove data before 1998 would be a good choice
feature_stat <- function(df,varName = "TRM"){
predVar <- paste(varName,"segment",sep = "_")
expertVar <- paste("expert",varName, sep = "_")
diffVar <- paste(varName,"diff",sep ="_")
expertExist <- !is.na(df[,expertVar])
predExist <- !is.na(df[,predVar])
df$only_pred <- predExist == TRUE & expertExist !=TRUE  # you only have expert
df$only_expert <- predExist == FALSE & expertExist == TRUE # you only have predication
res <- group_by(df,lake) %>% summarise(totalN = n(),only_pred = sum(only_pred),only_expert = sum(only_expert))
print(res)
pdf(sprintf("../../output/%s_diff.pdf",varName),width = 300,height = 2000)
print(qplot(lake,df[,diffVar],data = df)+geom_boxplot()+geom_text(aes(lake,df[,diffVar],label = paste(site,year)),data =df))
dev.off()
}
feature_stat(features)
# probably remove data before 1998 would be a good choice
feature_stat <- function(df,varName = "TRM"){
predVar <- paste(varName,"segment",sep = "_")
expertVar <- paste("expert",varName, sep = "_")
diffVar <- paste(varName,"diff",sep ="_")
expertExist <- !is.na(df[,expertVar])
predExist <- !is.na(df[,predVar])
df$only_pred <- predExist == TRUE & expertExist !=TRUE  # you only have expert
df$only_expert <- predExist == FALSE & expertExist == TRUE # you only have predication
res <- group_by(df,lake) %>% summarise(totalN = n(),only_pred = sum(only_pred),only_expert = sum(only_expert))
print(res)
pdf(sprintf("../../output/%s_diff.pdf",varName),width = 300,height = 1000)
print(qplot(lake,df[,diffVar],data = df)+geom_boxplot()+geom_text(aes(lake,df[,diffVar],label = paste(site,year)),data =df))
dev.off()
}
feature_stat(features)
# probably remove data before 1998 would be a good choice
feature_stat <- function(df,varName = "TRM"){
predVar <- paste(varName,"segment",sep = "_")
expertVar <- paste("expert",varName, sep = "_")
diffVar <- paste(varName,"diff",sep ="_")
expertExist <- !is.na(df[,expertVar])
predExist <- !is.na(df[,predVar])
df$only_pred <- predExist == TRUE & expertExist !=TRUE  # you only have expert
df$only_expert <- predExist == FALSE & expertExist == TRUE # you only have predication
res <- group_by(df,lake) %>% summarise(totalN = n(),only_pred = sum(only_pred),only_expert = sum(only_expert))
print(res)
pdf(sprintf("../../output/%s_diff.pdf",varName),height = 5, width = 3)
print(qplot(lake,df[,diffVar],data = df)+geom_boxplot()+geom_text(aes(lake,df[,diffVar],label = paste(site,year)),data =df))
dev.off()
}
feature_stat(features)
# probably remove data before 1998 would be a good choice
feature_stat <- function(df,varName = "TRM"){
predVar <- paste(varName,"segment",sep = "_")
expertVar <- paste("expert",varName, sep = "_")
diffVar <- paste(varName,"diff",sep ="_")
expertExist <- !is.na(df[,expertVar])
predExist <- !is.na(df[,predVar])
df$only_pred <- predExist == TRUE & expertExist !=TRUE  # you only have expert
df$only_expert <- predExist == FALSE & expertExist == TRUE # you only have predication
res <- group_by(df,lake) %>% summarise(totalN = n(),only_pred = sum(only_pred),only_expert = sum(only_expert))
print(res)
pdf(sprintf("../../output/%s_diff.pdf",varName),height = 500, width = 300)
print(qplot(lake,df[,diffVar],data = df)+geom_boxplot()+geom_text(aes(lake,df[,diffVar],label = paste(site,year)),data =df))
dev.off()
}
feature_stat(features)
feature_stat <- function(df,varName = "TRM"){
predVar <- paste(varName,"segment",sep = "_")
expertVar <- paste("expert",varName, sep = "_")
diffVar <- paste(varName,"diff",sep ="_")
expertExist <- !is.na(df[,expertVar])
predExist <- !is.na(df[,predVar])
df$only_pred <- predExist == TRUE & expertExist !=TRUE  # you only have expert
df$only_expert <- predExist == FALSE & expertExist == TRUE # you only have predication
res <- group_by(df,lake) %>% summarise(totalN = n(),only_pred = sum(only_pred),only_expert = sum(only_expert))
print(res)
pdf(sprintf("../../output/%s_diff.pdf",varName),height = 50, width = 30)
print(qplot(lake,df[,diffVar],data = df)+geom_boxplot()+geom_text(aes(lake,df[,diffVar],label = paste(site,year)),data =df))
dev.off()
}
feature_stat(features)
feature_stat(subFeatures)
feature_stat(subFeatures,"LEP")
feature_stat(subFeatures,"UHY")
features <- merge(features,locations,by.x = c("site"),by.y = "site",all.x=TRUE)
head(features)
head(local())
head(locations)
features <- merge(features,locations,by.x = "site",by.y = "Station",all.x=TRUE)
head(features)
plot_gly <- function(feature,variable){
feature <- arrange(feature,year)
feature[,variable] <- ifelse(feature[,variable]<0,NA,feature[,variable])
temp.gly <- glyphs(feature, "Long", "year", "Lat", variable , height=0.25,width = 0.5)
ggplot(temp.gly, ggplot2::aes(gx, gy, group = gid)) +add_ref_lines(temp.gly, color = "grey90") +add_ref_boxes(temp.gly, color = "grey90") +geom_path() + geom_point()+theme_bw() + labs(x = "", y = "")
}
plot_gly(features,"TRM_segment")
library(GGally)
library(ggplot2)
library(dplyr)
plot_gly(features,"TRM_segment")
plot_gly(subset(features,lake == "SU"),"TRM_segment")
library(leaflet)
head(locations)
visGeoLocations <- function(locations){
leaflet(data = locations) %>% addTiles() %>% addMarkers(~Long, ~Lat, popup = ~as.character(Station))
}
visGeoLocations(locations)
features <- read.csv("../../output/detectedFeatures.csv") %>% preprocessing()
locations <- read.csv("../../input/station_loc.csv")
locations$Long <- -locations$Long
expertNotes <- read.csv("../../input/All_Lakes_through2012.csv")
features <- merge(features,locations,by.x = "site",by.y = "Station",all.x=TRUE)
features$TRM_diff <- features$TRM_segment-features$expert_TRM
features$LEP_diff <- features$LEP_segment-features$expert_LEP
features$UHY_diff <- features$UHY_segment-features$expert_UHY
features <- rename(features,DCL_segment = DCL_depth)
head(locations)
visGeoLocations(locations)
plot_gly(subset(features,lake == "SU"),"TRM_segment")
unique(subset(features,lake == "SU")$site)
subset(features,site == "SU08" & year = 1996)
subset(features,site == "SU08" & year == 1996)
plot_gly(subset(features,lake == "SU" & year >1997),"TRM_segment")
subset(features,site == "SU10" & year == 2004)
plot_gly(subset(features,lake == "SU" & year >1997),"LEP_segment")
plot_gly(subset(features,lake == "SU" & year >1997),"UHY_segment")
features <- read.csv("../../output/detectedFeatures.csv") %>% preprocessing()
rm(list=ls())
library(dplyr)
library(reshape2)
library(ggplot2)
features <- read.csv("../../output/detectedFeatures.csv") %>% preprocessing()
source('~/Developer/Seabird/SeabirdCode/analysis/newMain.R')
head(features)
features <- subset(features, lake %in% c("ER","HU","SU","ON","MI"))
head(features)
features <- arrange(features,site,year)
head(features)
head(features)
plot_gly(subset(features,lake == "SU"),"TRM_segment")
library(GGally)
library(ggplot2)
library(dplyr)
plot_gly(subset(features,lake == "SU"),"TRM_segment")
source("./plot.R")
plot_gly(subset(features,lake == "SU"),"TRM_segment")
source('~/Developer/Seabird/SeabirdCode/analysis/newMain.R')
source('~/Developer/Seabird/SeabirdCode/analysis/newMain.R')
head(features)
source('~/Developer/Seabird/SeabirdCode/analysis/newMain.R')
head(features)
head(subset(features,lake == "SU"))
summary(subset(features,lake == "SU"))
which.max(subset(features,lake == "SU")[,"TRM_segment"])
subset(features,lake == "SU")[325,]
unique(features$site)
unique(features$lake)
subset(features,lake == "SU")$TRM_segment
summary(subset(features,lake == "SU")$TRM_segment)
plot(subset(features,site =="SU08"))
plot(subset(features,site =="SU08")$TRM_segment)
subset(features,site =="SU08"
)
summary(features)
SUData <- subset(features,lake == "SU")
head(SUData)
features_stat(features,varName = "TRM")
feature_stat(features,varName = "TRM")
feature_stat(features,varName = "LEP")
feature_stat(features,varName = "DCL")
head(features)
features$DCL_diff <- features$DCL_segment-features$expert_DCL
head(features$DCL_diff)
feature_stat(features,varName = "DCL")
subset(features,site == "SU15" & year == 1999)
plot_gly(subset(features,lake == "SU"),"TRM_segment")
dev.off()
plot_gly(subset(features,lake == "SU"),"TRM_segment")
dev.off()
dev.off()
plot_gly(subset(features,lake == "SU"),"TRM_segment")
source('~/Developer/Seabird/SeabirdCode/analysis/newMain.R')
features$DCL_diff <- features$DCL_segment-features$expert_DCL
source('~/Developer/Seabird/SeabirdCode/analysis/newMain.R')
source('~/Developer/Seabird/SeabirdCode/analysis/newMain.R')
dev.off()
dev.off()
source('~/Developer/Seabird/SeabirdCode/analysis/newMain.R')
dev.off()
plot_gly(subset(features,lake == "SU"),"TRM_segment")
plot_gly(subset(features,lake == "SU"),"DCL_segment")
plot_gly(subset(features,lake == "SU"),"DCL_magnitude")
head(features)
plot_gly(SUData,"DCL_conc")
plot_gly(SUData,"TRM_segment")
plot_gly(SUData,"LEP_segment")
plot_gly(SUData,"UHY_segment")
plot_gly(SUData,"DCL_segment")
# probably remove data before 1998 would be a good choice
feature_stat <- function(df,varName = "TRM"){
predVar <- paste(varName,"segment",sep = "_")
expertVar <- paste("expert",varName, sep = "_")
diffVar <- paste(varName,"diff",sep ="_")
expertExist <- !is.na(df[,expertVar])
predExist <- !is.na(df[,predVar])
df$only_pred <- predExist == TRUE & expertExist !=TRUE  # you only have expert
df$only_expert <- predExist == FALSE & expertExist == TRUE # you only have predication
df$pred_expert <- predExist == TRUE & expertExist == TRUE
res <- group_by(df,lake) %>% summarise(totalN = n(),only_pred = sum(only_pred),only_expert = sum(only_expert),allExist = sum(pred_expert))
print(res)
pdf(sprintf("../../output/%s_diff.pdf",varName),height = 50, width = 30)
print(qplot(lake,df[,diffVar],data = df)+geom_boxplot()+geom_text(aes(lake,df[,diffVar],label = paste(site,year)),data =df))
dev.off()
}
feature_stat(features,varName = "DCL")
feature_stat(features,varName = "TRM")
feature_stat(features,varName = "UHY")
feature_stat(features,varName = "LEP")
source('~/Developer/Seabird/SeabirdCode/analysis/newMain.R')
head(features)
only_expert_ind <- is.na(features$DCL_depth) & !is.na(features$expert_DCL)
features[only_expert_ind,]
features[only_expert_ind,c("site","year")]
features[only_expert_ind,c("site","year","fileId")]
head(features)
features[only_expert_ind,c("site","year","fileId","peakNums")]
write.csv(features[only_expert_ind,c("site","year","fileId","peakNums")],"DCL_missing.csv")
features <- read.csv("../../output/detectedFeatures.csv") %>% preprocessing()
getwd()
?glyphs
??glyphs
source('~/Developer/Seabird/SeabirdCode/analysis/newMain.R')
waterChemistry <- read.csv("../../output/waterFeature.csv")
head(waterChes)
head(waterChemistry)
head(features)
features <- merge(features,waterChemistry,by.x = "fileId",by.y = "fid")
head(features)
features <- read.csv("../../output/detectedFeatures.csv") %>% preprocessing()
locations <- read.csv("../../input/station_loc.csv")
locations$Long <- -locations$Long
expertNotes <- read.csv("../../input/All_Lakes_through2012.csv")
features <- merge(features,locations,by.x = "site",by.y = "Station",all.x=TRUE)
features <- merge(features,waterChemistry,by.x = c("fileId","site","year"),by.y = c("fid","site","year"))
head(features)
features <- arrange(features,site,year)
head(features)
features <- read.csv("../../output/detectedFeatures.csv") %>% preprocessing()
locations <- read.csv("../../input/station_loc.csv")
waterChemistry <- read.csv("../../output/waterFeature.csv")
locations$Long <- -locations$Long
expertNotes <- read.csv("../../input/All_Lakes_through2012.csv")
features <- merge(features,locations,by.x = "site",by.y = "Station",all.x=TRUE)
head(features)
features <- read.csv("../../output/detectedFeatures.csv") %>% preprocessing()
locations <- read.csv("../../input/station_loc.csv")
waterChemistry <- read.csv("../../output/waterFeature.csv")
locations$Long <- -locations$Long
expertNotes <- read.csv("../../input/All_Lakes_through2012.csv")
features <- merge(features,locations,by.x = "site",by.y = "Station")
head(features)
features <- merge(features,waterChemistry,by.x = c("fileId","site","year"),by.y = c("fid","site","year")) %>%
arrange(site,year)
head(features)
dim(features)
unique(features$site)
# read the data
features <- read.csv("../../output/detectedFeatures.csv") %>% preprocessing()
locations <- read.csv("../../input/station_loc.csv")
waterChemistry <- read.csv("../../output/waterFeature.csv")
locations$Long <- -locations$Long
expertNotes <- read.csv("../../input/All_Lakes_through2012.csv")
features <- merge(features,locations,by.x = "site",by.y = "Station")
# calculate the differences between algorithm and expert notes
features$TRM_diff <- features$TRM_segment-features$expert_TRM
features$LEP_diff <- features$LEP_segment-features$expert_LEP
features$UHY_diff <- features$UHY_segment-features$expert_UHY
features$DCL_diff <- features$DCL_depth-features$expert_DCL
features$DCL_segment <- features$DCL_depth
# filter out the strange year and site
features <-
subset(features,year>1997 & lake %in% c("ER","HU","SU","ON","MI")) %>%
arrange(site,year)
# merge with water chemistry
features <- merge(features,waterChemistry,by.x = c("fileId","site","year"),by.y = c("fid","site","year")) %>%
arrange(site,year)
head(features)
dim(features)
head(features)
features$fluoRatio <- features$DCL_conc/features$epi_mean_Fluorescence
plot_gly(SUData,"fluoRatio")
SUData <- subset(features,lake == "SU")
plot_gly(SUData,"DCL_conc")
plot_gly(SUData,"DCL_depth")
plot_gly(SUData,"TRM_segment")
plot_gly(SUData,"LEP_segment")
plot_gly(SUData,"UHY_segment")
plot_gly(SUData,"fluoRatio")
?glyphs
?add_ref_lines
qplot(lake,df[,"fluoRatio"],data = features)+geom_boxplot()+geom_text(aes(lake,df[,diffVar],label = paste(site,year)),data =features)
features$fluoRatio <- features$DCL_conc/features$epi_mean_Fluorescence
qplot(lake,df[,"fluoRatio"],data = features)+geom_boxplot()+geom_text(aes(lake,df[,diffVar],label = paste(site,year)),data =features)
qplot(lake,features[,"fluoRatio"],data = features)+geom_boxplot()+geom_text(aes(lake,df[,diffVar],label = paste(site,year)),data =features)
qplot(lake,fluoRatio,data = features)+geom_boxplot()+geom_text(aes(lake,df[,diffVar],label = paste(site,year)),data =features)
qplot(lake,fluoRatio,data = features)+geom_boxplot()
qplot(lake,fluoRatio,data = features)+geom_boxplot()+geom_text(aes(lake,features[,fluoRatio],label = paste(site,year)),data =features)
qplot(lake,fluoRatio,data = features)+geom_boxplot()+geom_text(aes(lake,fluoRatio,label = paste(site,year)),data =features)
tapply(features$fluoRatio,features$lake,summary)
tapply(SUData$fluoRatio,SUData$site,summary)
tapply(SUData$fluoRatio,SUData$year,summary)
tapply(features$fluoRatio,features$lake,summary)
qplot(site,fluoRatio,data = SUData)+geom_boxplot()+geom_text(aes(site,fluoRatio,label = paste(site,year)),data =SUData)
qplot(site,fluoRatio,data = SUData)+geom_boxplot()+geom_text(aes(site,fluoRatio,label = paste(year)),data =SUData)
plot_gly(SUData,"fluoRatio")
summary(SUData[,c("TRM_segment","LEP_segment","UHY_segment","DCL_conc","DCL_depth","fluoRatio")])
names(SUData)
dim(SUData)
plot_gly(SUData,"TRM_num_segment")
summary(SUData$TRM_num_segment)
plot_gly(SUData,"TRM_idx")
summary(SUData$TRM_idx)
head(SUData$TRM_idx)
SUData$UHY_num <- SUData$TRM_num_segment-SUData$TRM_idx
plot_gly(SUData,"UHY_num")
summary(SUData$UHY_num)
SUData$UHY_num <- SUData$TRM_num_segment-(SUData$TRM_idx+1)
plot_gly(SUData,"UHY_num")
summary(SUData$UHY_num)
features$DCL_size <- features$DCL_bottomDepth-features$DCL_upperDepth
features$TRM_diff <- features$TRM_segment-features$expert_TRM
features$LEP_diff <- features$LEP_segment-features$expert_LEP
features$UHY_diff <- features$UHY_segment-features$expert_UHY
features$DCL_diff <- features$DCL_depth-features$expert_DCL
features$UHY_num <- features$TRM_num_segment-(features$TRM_idx+1)
features$DCL_segment <- features$DCL_depth
features$DCL_size <- features$DCL_bottomDepth-features$DCL_upperDepth
features$fluoRatio <- features$DCL_conc/features$epi_mean_Fluorescence
SUData <- subset(features,lake == "SU")
plot_gly(SUData,"DCL_size")
plot_gly(subset(SUData,year!=2007),"DCL_size")
plot_gly(SUData,"DCL_size")
head(SUData)
plot_gly(SUData,"TRM_gradient_segment")
summary(SUData$TRM_gradient_segment)
dim(features)
source('~/Developer/Seabird/SeabirdCode/analysis/newMain.R')
source('~/Developer/Seabird/SeabirdCode/analysis/newMain.R')
source('~/Developer/Seabird/SeabirdCode/analysis/newMain.R')
source('~/Developer/Seabird/SeabirdCode/analysis/newMain.R')
source('~/Developer/Seabird/SeabirdCode/analysis/newMain.R')
source('~/Developer/Seabird/SeabirdCode/analysis/plot.R')
source('~/Developer/Seabird/SeabirdCode/analysis/newMain.R')
source('~/Developer/Seabird/SeabirdCode/analysis/newMain.R')
source('~/Developer/Seabird/SeabirdCode/analysis/newMain.R')
