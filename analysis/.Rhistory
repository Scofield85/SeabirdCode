ind_ER15M <- which(features$site == "ER15M")
features[ind_MI18M,"site"] = "MI18"
features[ind_ER15M,"site"] = "ER15"
features$lake <- substr(features$site,1,2)
return(features)
}
# functions to summary statistics
# probably remove data before 1998 would be a good choice
feature_stat <- function(df,varName = "TRM"){
predVar <- paste(varName,"segment",sep = "_")
expertVar <- paste("expert",varName, sep = "_")
diffVar <- paste(varName,"diff",sep ="_")
expertExist <- !is.na(df[,expertVar])
predExist <- !is.na(df[,predVar])
df$only_pred <- predExist == TRUE & expertExist !=TRUE  # you only have expert
df$only_expert <- predExist == FALSE & expertExist == TRUE # you only have predication
df$pred_expert <- predExist == TRUE & expertExist == TRUE
res <- group_by(df,lake) %>% summarise(totalN = n(),only_pred = sum(only_pred),only_expert = sum(only_expert),allExist = sum(pred_expert))
print(res)
pdf(sprintf("../../output/%s_diff_meta.pdf",varName),height = 50, width = 30)
print(qplot(lake,df[,diffVar],data = df)+geom_boxplot()+geom_text(aes(lake,df[,diffVar],label = paste(site,year)),data =df))
dev.off()
pdf(sprintf("../../output/%s_diff.pdf",varName),height = 4, width = 7)
print(
qplot(lake,abs(df[,diffVar]),data = df)+geom_boxplot(size = 1)+theme_bw()+xlab("Lake")+ylab("Absolute Depth Differences (m)")
)
dev.off()
}
clusteringAlgorithm <- function(){}
# read the data
features <- read.csv("../../output/detectedFeatures.csv") %>% preprocessing()
locations <- read.csv("../../input/station_loc.csv")
head(features)
waterChemistry <- read.csv("../../output/waterFeature.csv")
features <- read.csv("../../output/detectedFeatures.csv") %>% preprocessing()
locations <- read.csv("../../input/station_loc.csv")
waterChemistry <- read.csv("../../output/waterFeature.csv")
locations$Long <- -locations$Long
expertNotes <- read.csv("../../input/All_Lakes_through2012.csv")
features <- merge(features,locations,by.x = "site",by.y = "Station")
# calculate the differences between algorithm and expert notes
features$TRM_diff <- features$TRM_segment-features$expert_TRM
features$LEP_diff <- features$LEP_segment-features$expert_LEP
features$UHY_diff <- features$UHY_segment-features$expert_UHY
features$DCL_diff <- features$DCL_depth-features$expert_DCL
features$UHY_num <- features$TRM_num_segment-(features$TRM_idx+1)
features$DCL_segment <- features$DCL_depth
features$DCL_size <- features$DCL_bottomDepth-features$DCL_upperDepth
# filter out the strange year and site
features <-
subset(features,year>1997 & lake %in% c("ER","HU","SU","ON","MI")) %>%
arrange(site,year)
head(features)
arrange(features,doubleTRM)
head(arrange(features,doubleTRM))
head(arrange(features,DESC(doubleTRM)))
?arrange
head(arrange(features,desc(doubleTRM)))
head(arrange(features,desc(doubleTRM))[,c("site","year","doubleTRM")],20)
head(arrange(features,desc(doubleTRM))[,c("site","year","doubleTRM")],30)
head(arrange(features,desc(positiveGradient))[,c("site","year","doubleTRM")],30)
head(arrange(features,desc(positiveTRM))[,c("site","year","doubleTRM")],30)
head(arrange(features,desc(positiveTRM))[,c("site","year","positiveTRM")],30)
head(arrange(features,desc(positiveTRM))[,c("site","year","positiveTRM","doubleTRM")],30)
head(arrange(features,desc(doubleTRM))[,c("site","year","positiveTRM","doubleTRM")],30)
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
0:0.1:1
0:1:0.1
seq(0,1,0.1)
source('~/Developer/Seabird/SeabirdCode/analysis/./analysis_DCL.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/./analysis_DCL.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
debugSource('~/Developer/Seabird/SeabirdCode/analysis/./analysis_DCL.R')
main()
head(allFitRatios)
sink()
head(allFitRatios)
sink()
sink()
head(allFitRatios)
allFitRatios
allFitRatios <- getGoodFitRatio(features) %>%
melt(id.vars = c("thres"),value.name = "Ratio",variable.name = "Lake")
qplot(thres, Ratio, data=allFitRatios, color = variable)+xlab("Threshold")
qplot(thres, Ratio, data=allFitRatios, color = Lake)+xlab("Threshold")
qplot(thres, Ratio, data=allFitRatios, color = Lake)+xlab("Threshold")+geom_line()
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
main()
plot_gly(SUData,"UHY_num",reverse = FALSE)
plot_gly(SUData,"TRM_gradient_segment",reverse = FALSE)
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
warnings()
warnings()
sink()
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
warnings()
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
debugSource('~/Developer/Seabird/SeabirdCode/analysis/expertValidation.R')
main()
boxplot(TRM_diff~lake,data = subset(df, is.na(TRM_diff)<1),outline = FALSE)
dev.off()
boxplot(TRM_diff~lake,data = subset(df, is.na(TRM_diff)<1),outline = FALSE)
?boxplot
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
sqrt(500*0.15*0.85)
waterChemistry <- read.csv("../../output/waterFeature.csv")
locations <- read.csv("../../input/station_loc.csv")
waterChemistry <- read.csv("../../output/waterFeature.csv")
features <- read.csv("../../output/detectedFeatures.csv") %>%
preprocessing(locations = locations, waterChemistry = waterChemistry)
features <- read.csv("../../output/detectedFeatures.csv")
names(features)
subset(features,fileid==1760)
subset(features,fileId==1760)
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/analysis_DCL.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
main()
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
?median
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
locations <- read.csv("../../input/station_loc.csv")
waterChemistry <- read.csv("../../output/waterFeature.csv")
features <- read.csv("../../output/detectedFeatures.csv") %>%
preprocessing(locations = locations, waterChemistry = waterChemistry)
head(features)
names(features)
SUData <- subset(features,lake == "SU")
head(SUData)
saveRDS(SUData,"SUData.rds")
lm(DCL_conc~epi_mean_Temperature,data=SUData)
plot(DCL_conc~epi_mean_Temperature,data=SUData)
plot(DCL_conc~epi_mean_Temperature,data=features)
kn(DCL_conc~epi_mean_Temperature,data=features)
lm(DCL_conc~epi_mean_Temperature,data=features)
lm(DCL_conc~epi_mean_Temperature,data=SUData)
lm(DCL_conc~epi_mean_Temperature+epi_mean_DO,data=SUData)
summary(lm(DCL_conc~epi_mean_Temperature+epi_mean_DO,data=SUData))
summary(lm(DCL_conc~epi_mean_Temperature,data=SUData))
summary(lm(DCL_conc~epi_mean_BAT,data=SUData))
summary(lm(DCL_conc~epi_mean_Beam_Attenuation,data=SUData))
plot(lm(DCL_conc~epi_mean_Beam_Attenuation,data=SUData))
plot(DCL_conc~epi_mean_Beam_Attenuation,data=SUData)
plot(DCL_conc~epi_mean_Beam_Attenuation,data=features)
plot(DCL_conc~epi_mean_Beam_Attenuation,data=SUData)
plot(DCL_conc~epi_mean_Beam_Attenuation,data=subset(SUData,epi_mean_Beam_Attenuation<3))
plot(DCL_conc~epi_mean_Beam_Attenuation,data=subset(SUData,epi_mean_Beam_Attenuation<2))
lm(DCL_conc~epi_mean_Beam_Attenuation,data=subset(SUData,epi_mean_Beam_Attenuation<2))
plot(DCL_conc~epi_mean_Beam_Attenuation,data=SUData)
lm(DCL_conc~epi_mean_Beam_Attenuation,data=SUData)
summary(lm(DCL_conc~epi_mean_Beam_Attenuation,data=SUData))
summary(lm(DCL_conc~epi_mean_Beam_Temperature,data=SUData))
summary(lm(DCL_conc~epi_mean_Temperature,data=SUData))
cor(DCL_conc~epi_mean_Beam_Attenuation,data=SUData)
cor(SUData$DCL_conc,SUData$epi_mean_Beam_Attenuation)
cor(SUData$DCL_conc,SUData$epi_mean_Beam_Attenuation)
?cor
cor(SUData$DCL_conc,SUData$epi_mean_Beam_Attenuation,use = "complete.obs")
cor.test(SUData$DCL_conc,SUData$epi_mean_Beam_Attenuation,use = "complete.obs")
cor.test(SUData$TRM_segment,SUData$epi_mean_Beam_Attenuation,use = "complete.obs")
cor.test(SUData$TRM_segment,SUData$epi_mean_Temperature,use = "complete.obs")
cor.test(SUData$TRM_segment,SUData$epi_mean_Temperature,use = "complete.obs")
cor.test(SUData$TRM_segment,SUData$epi_mean_DO,use = "complete.obs")
lm(formula = TRM_segment ~ epi_mean_DO, data = SUData)
names(SUData)
cor.test(SUData$TRM_segment,SUData$epi_mean_Fluorescence,use = "complete.obs")
cor.test(SUData$TRM_segment,SUData$Specific_Conductivity,use = "complete.obs")
cor.test(SUData$TRM_segment,SUData$epi_mean_Specific_Conductivity,use = "complete.obs")
for(surfaceWC in paste("epi_mean",c("Specific_Conductivity","Temperature","Fluorescence","Beam_Attenuation","DO"))){
for(aa in c("TRM_segment","DCL_conc","DCL_depth")){
print(aa)
print(surfaceWC)
cor.test(SUData[,surfaceWC],SUData[,aa],use = "complete.obs")
}
}
for(surfaceWC in paste("epi_mean",c("Specific_Conductivity","Temperature","Fluorescence","Beam_Attenuation","DO"),sep="_")){
for(aa in c("TRM_segment","DCL_conc","DCL_depth")){
print(aa)
print(surfaceWC)
cor.test(SUData[,surfaceWC],SUData[,aa],use = "complete.obs")
}
}
for(surfaceWC in paste("epi_mean",c("Specific_Conductivity","Temperature","Fluorescence","Beam_Attenuation","DO"),sep="_")){
for(aa in c("TRM_segment","DCL_conc","DCL_depth")){
print(aa)
print(surfaceWC)
print(cor.test(SUData[,surfaceWC],SUData[,aa],use = "complete.obs"))
}
}
[1] "DCL_conc"
[1] "epi_mean_DO"
plot(DCL_conc~epi_mean_DO,data=SUData)
for(surfaceWC in paste("epi_mean",c("Specific_Conductivity","Temperature","Fluorescence","Beam_Attenuation","DO"),sep="_")){
for(aa in c("TRM_segment","DCL_conc","DCL_depth")){
cleanData = SUData[SUData[,surfaceWC]>0,]
print(aa)
print(surfaceWC)
print(cor.test(SUData[,surfaceWC],SUData[,aa],use = "complete.obs"))
}
}
for(surfaceWC in paste("epi_mean",c("Specific_Conductivity","Temperature","Fluorescence","Beam_Attenuation","DO"),sep="_")){
for(aa in c("TRM_segment","DCL_conc","DCL_depth")){
cleanData = SUData[SUData[,surfaceWC]>0,]
print(aa)
print(surfaceWC)
print(cor.test(cleanData[,surfaceWC],cleanData[,aa],use = "complete.obs"))
}
}
?log
for(surfaceWC in paste("epi_mean",c("Specific_Conductivity","Temperature","Fluorescence","Beam_Attenuation","DO"),sep="_")){
for(aa in c("TRM_segment","DCL_conc","DCL_depth")){
cleanData = SUData[SUData[,surfaceWC]>0,]
if(aa=="DCL_conc") cleanData[,aa] = log(cleanData[,aa])
print(aa)
print(surfaceWC)
print(cor.test(cleanData[,surfaceWC],cleanData[,aa],use = "complete.obs"))
}
}
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
SUData <- readRDS("SUData.rds")
SUData$diff <- SUData$DCL_conc-SUData$epi_mean_Fluorescence
cor.test(SUData$diff,SUData$epi_mean_Beam_Attenuation,use = "complete.obs")
cor.test(log(SUData$diff),SUData$epi_mean_Beam_Attenuation,use = "complete.obs")
cor.test(SUData$diff,SUData$epi_mean_Temperature,use = "complete.obs")
features <- read.csv("/Users/wenzhaoxu/Developer/Seabird/output/detectedFeatures.csv")
a <- subset(features, is.na(UHY_segment))
head(a)
locations <- read.csv("../../input/station_loc.csv")
locations <- read.csv("../../input/station_loc.csv")
waterChemistry <- read.csv("../../output/waterFeature.csv")
features <- read.csv("../../output/detectedFeatures.csv") %>%
preprocessing(locations = locations, waterChemistry = waterChemistry)
head(features)
a <- subset(features,is.na(UHY_segment) & !is.na(expert_UHY))
head(a)
a[,c("site","year","fileId")]
nrow(a[,c("site","year","fileId")])
nrow(a[,c("site","year","fileId","UHY_segment","expert_UHY")])
a[,c("site","year","fileId","UHY_segment","expert_UHY")]
a[,c("site","year","fileId","UHY_segment","expert_UHY","expert_TRM")]
a[,c("site","year","fileId","UHY_segment","expert_UHY","expert_TRM","expert_LEP")]
locations <- read.csv("../../input/station_loc.csv")
waterChemistry <- read.csv("../../output/waterFeature.csv")
features <- read.csv("../../output/detectedFeatures.csv") %>%
preprocessing(locations = locations, waterChemistry = waterChemistry)
head(features)
boxplot(lake~lastSegmentGradient,data = features)
boxplot(lake,lastSegmentGradient,data = features)
boxplot(Lake~lastSegmentGradient,data = features)
boxplot(lake~lastSegmentGradient,data = features)
qplot(lake, lastSegmentGradient,data = features)+geom_boxplot()
boxplot(lake, lastSegmentGradient,data = features)+geom_boxplot()
group_by(features,lake)%>% summarise(summ = summary(lastSegmentGradient))
group_by(features,lake)%>% summarise(median = median(lastSegmentGradient))
group_by(features,lake)%>% summarise(median = median(lastSegmentGradient,na.rm= TRUE))
group_by(features,lake)%>% summarise(median = max(lastSegmentGradient,na.rm= TRUE))
arrange(features,desc(lastSegment))[,c("site","year","fileId")]
arrange(features,desc(lastSegmentGradient))[,c("site","year","fileId")]
head(arrange(features,desc(lastSegmentGradient))[,c("site","year","fileId")])
head(arrange(features,desc(lastSegmentGradient))[,c("site","year","fileId")],20)
group_by(features,lake)%>% summarise(median = median(firstSegmentGradient,na.rm= TRUE))
qplot(firstSegmentGradient,lastSegmentGradient,data = features,color = "lake")
qplot(firstSegmentGradient,lastSegmentGradient,data = features,color = lake)
qplot(firstSegmentGradient,lastSegmentGradient,data = features,color = lake)+xlim(c(0,1))
qplot(firstSegmentGradient,lastSegmentGradient,data = features,color = lake)+xlim(c(0,1))+ylim(c(0,1))
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
a <- subset(features,is.na(UHY_segment) & !is.na(expert_UHY))
locations <- read.csv("../../input/station_loc.csv")
waterChemistry <- read.csv("../../output/waterFeature.csv")
features <- read.csv("../../output/detectedFeatures.csv") %>%
preprocessing(locations = locations, waterChemistry = waterChemistry)
a <- subset(features,is.na(UHY_segment) & !is.na(expert_UHY))
arrange(features,desc(firstSegmentGradient))[,c("site","year","fileId")]
head(arrange(features,desc(firstSegmentGradient))[,c("site","year","fileId")],20)
a <- subset(features,is.na(UHY_segment) & !is.na(expert_UHY))
a[,c("site","year","fileId","UHY_segment","expert_UHY","expert_TRM","expert_LEP")]
a <- subset(features,is.na(LEP_segment) & !is.na(expert_LEP))
a[,c("site","year","fileId","UHY_segment","expert_UHY","expert_TRM","expert_LEP")]
a[,c("site","year","fileId","UHY_segment","expert_UHY","expert_TRM","expert_LEP","firstSegmentGradient")]
qplot(firstSegmentGradient,lastSegmentGradient,data = features,color = lake)
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/expertValidation.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/expertValidation.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
a <- readRDS("SUData.rds")
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/analysis_DCL.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
main()
head(allGoodFit)
head(allGoodFit)
sink()
sink()
sink()
sink()
sink()
head(allGoodFit)
boxplot(lake, DCLsize,data = allGoodFit)
boxplot(DCLsize~lake,data = allGoodFit)
boxplot(DCL_size~lake,data = allGoodFit)
boxplot(DCL_size~lake,data = allGoodFit)
dev.off()
dev.off()
dev.off()
dev.off()
boxplot(DCL_size~lake,data = allGoodFit)
debugSource('~/Developer/Seabird/SeabirdCode/analysis/lakeSU.R')
main()
source('~/Developer/Seabird/SeabirdCode/analysis/analysis_DCL.R')
main()
source('~/Developer/Seabird/SeabirdCode/analysis/./analysis_DCL.R')
main()
head(statsGroupByYear)
statsGroupBySite <- group_by(SUData,site) %>% summarise(median = median(fluoRatio,na.rm=TRUE)) %>% data.frame()
print(data.frame(statsGroupBySite))
print(data.frame(statsGroupBySite))
?merge
locations <- read.csv("../../input/station_loc.csv")
head(locations)
qmplot
??qmplot
main
main()
pdf("ratioTempor.pdf")
print(boxplot(median~year,data = statsGroupByYear,ylab = "DCL/Surface Ratio"))
dev.off()
pdf("ratioTempor.pdf")
print(boxplot(fluoRatio~year,data = SUData,ylab = "DCL/Surface Ratio"))
dev.off()
pdf("ratioTempor.pdf",width = 5, height = 2.5)
print(boxplot(fluoRatio~year,data = SUData,ylab = "DCL/Surface Ratio"))
dev.off()
pdf("ratioTempor.pdf",width = 5, height = 3)
print(boxplot(fluoRatio~year,data = SUData,ylab = "DCL/Surface Ratio"))
dev.off()
pdf("ratioTempor.pdf",width = 5, height = 4)
print(boxplot(fluoRatio~year,data = SUData,ylab = "DCL/Surface Ratio"))
dev.off()
pdf("ratioTempor.pdf",width = 5, height = 5)
print(boxplot(fluoRatio~year,data = SUData,ylab = "DCL/Surface Ratio"))
dev.off()
statsGroupBySite <- group_by(SUData,site) %>% summarise(median = median(fluoRatio,na.rm=TRUE)) %>% data.frame() %>% merge(locations, by.x = "site", by.y = "Station")
print(data.frame(statsGroupBySite))
statsGroupBySite$Long = -	statsGroupBySite$Long
pdf("ratioSpatio.pdf")
print(qmplot(Long,Lat,data = statsGroupBySite, color = median))
dev.off()
library(ggmap)
pdf("ratioSpatio.pdf")
print(qmplot(Long,Lat,data = statsGroupBySite, color = median))
dev.off()
print(qmplot(Long,Lat,data = statsGroupBySite, color = median,size = I(5)))
print(qmplot(Long,Lat,data = statsGroupBySite, color = median,size = I(5))+scale_color_gradientn(colours = terrain.colors(10)))
pdf("ratioSpatio.pdf")
print(qmplot(Long,Lat,data = statsGroupBySite, color = median,size = I(5))+scale_color_gradientn(colours = terrain.colors(10)))
dev.off()
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
Sys.Date()
sink(sprintf("./%s_results.txt",Sys.Date()))
main()
sink()
sink()
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
sink(sprintf("./%s_results.txt",Sys.Date()))
main()
sink()
sink()
locations <- read.csv("../../input/station_loc.csv")
waterChemistry <- read.csv("../../output/waterFeature.csv")
features <- read.csv("../../output/detectedFeatures.csv") %>%
preprocessing(locations = locations, waterChemistry = waterChemistry)
print("all data")
allFitRatios <- getGoodFitRatio(features) %>%
melt(id.vars = c("thres"),value.name = "Ratio",variable.name = "Lake")
allFitRatios
allFitRatios
sink()
sink()
allFitRatios
gaussianFit(features)
features$DCL_leftShapeFitErr
hist(features$DCL_leftShapeFitErr)
sink()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
summary(features$DCL_leftShapeFitErr)
summary(features$DCL_rightShapeFitErr)
hist(features$DCL_leftShapeFitErr)
locations <- read.csv("../../input/station_loc.csv")
waterChemistry <- read.csv("../../output/waterFeature.csv")
features <- read.csv("../../output/detectedFeatures.csv") %>%
preprocessing(locations = locations, waterChemistry = waterChemistry)
print("Doing algorithm validation")
main_expertValidation(features)
print("****************")
main_analysis_DCL(features)
debug(gaussianFit)
main_analysis_DCL(features)
summary(features$DCL_leftShapeFitErr)
hist(features$DCL_leftShapeFitErr)
hist(features$DCL_leftShapeFitErr,breaks = 100)
arrange(features,leftShapeFitErr)
arrange(features,leftShapeFitErr)
?arrange
arrange(features, DCL_leftShapeFitErr)
arrange(features[,c("fileI")], desc(DCL_leftShapeFitErr))
arrange(features[,c("fileId")], desc(DCL_leftShapeFitErr))
arrange(features[,c("fileId","DCL_leftShapeFitErr")], desc(DCL_leftShapeFitErr))
a <- arrange(features[,c("fileId","DCL_leftShapeFitErr")], desc(DCL_leftShapeFitErr))
head(a)
a <- arrange(features[,c("fileId","DCL_rightShapeFitErr")], desc(DCL_rightShapeFitErr))
head(a)
features$lake
allGoodFit <- gaussianFit(features) %>% shapeAnalysis_DCL()
lake_ = "SU"
print("*******")
print(lake_)
print("*******")
allFitRatios <- getGoodFitRatio(features) %>%
melt(id.vars = c("thres"),value.name = "Ratio",variable.name = "Lake")
hist(features$DCL_leftShapeFitErr)
dev.off()
dev.off()
dev.off()
hist(features$DCL_leftShapeFitErr)
hist(features$DCL_rightShapeFitErr)
b <- features
b$error <- max(features$DCL_rightShapeFitErr,features$DCL_leftShapeFitEr)
head(b$err)
hist(b$error)
getGoodFitRatio(features)
exit()
gaussianFit <- function(features,threshold=0.8){
# print the ratio of each lake that the peak is satisfy a Gaussian shape
goodFitData <- subset(features, DCL_leftShapeFitErr < threshold & DCL_rightShapeFitErr < threshold & peakNums ==1)
return(goodFitData)
}
allFitRatios <- getGoodFitRatio(features,seq(0,1,0.1))
allFitRatios
getGoodFitRatio(features,"SU",threshold = seq(0,1,0.1))
getGoodFitRatio
getGoodFitRatio(features)
getGoodFitRatio\
getGoodFitRatio
getGoodFitRatio <- function(features,threshold = seq(-0.5,1,0.1)){
ratio <- data.frame(thres = threshold)
for(lake_ in allLakes){
subData <- subset(features,lake == lake_)
r <- c()
for(t in threshold){
goodFitData <- gaussianFit(subData,threshold = t)
r <- c(r,nrow(goodFitData)/nrow(subData))
}
ratio[,lake_] = r
}
return(ratio)
}
getGoodFitRatio(features = features,threshold = seq(0,1,0.1))
arrange(features,DCL_leftShapeFitErr)
arrange(features[,c("fileID","DCL_leftShapeFitErr")],DCL_leftShapeFitErr)
arrange(features[,c("fileId","DCL_leftShapeFitErr")],DCL_leftShapeFitErr)
arrange(features[,c("fileId","DCL_leftShapeFitErr")],desc(DCL_leftShapeFitErr))[1:1--.]
arrange(features[,c("fileId","DCL_leftShapeFitErr")],desc(DCL_leftShapeFitErr))[1:100.]
arrange(features[,c("fileId","DCL_leftShapeFitErr")],desc(DCL_leftShapeFitErr))[1:100,]
arrange(features[,c("fileId","DCL_leftShapeFitErr","site")],desc(DCL_leftShapeFitErr))[1:100,]
arrange(features[,c("fileId","DCL_rightShapeFitErr","site")],desc(DCL_rightShapeFitErr))[1:100,]
