?spectrum
spectrum(Q,method="ar")
ar(Q)
install.packages("shiny")
?colorFactor
??colorFactor
install.packages("leaflet")
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m
?addMarkers
library(fields)
?tps
??tps
?Tps
library(RMySQL)
conn <- dbConnect(MySQL(), dbname = "DO2014", username="root", password="XuWenzhaO", host="127.0.0.1", port=3306)
meta <- dbReadTable(conn,"loggerInfo")
meta_B <- subset(meta,available==1 & loggerPosition=="B")
data  <- list()
for(i in 1:nrow(meta_B)){
loggerID <- meta_B[i,"loggerID"]
sql <- paste("select logger, date(Time) as Time, AVG(DO) as DO_avg from loggerData where logger=",loggerID," AND Time < '2014-10-09' AND Time > '2014-06-25' Group by date(Time)")
res <- dbGetQuery(conn,sql)
data[[paste("logger_",loggerID,sep="")]] <- res$DO_avg
}
ata$Time <- as.POSIXct(res$Time)
DO_bottom <- as.data.frame(data)
stationName=paste("logger",meta_B$loggerID,sep="_")
mytimeDFList <- spatialTemporalKrig(DO_bottom,meta_B,stationName,endTime=as.POSIXct("2014-10-31"),subsample=FALSE)
detrendingModel <- mytimeDFList$detrendingModel
mytimeDF <- mytimeDFList$timeDF
detrending <- function(data,sp,time){
library(fields)
if(ncol(data)!=nrow(sp)){
print("Wrong")
return(0)
}
myDf <- data.frame(time=rep(time,each=nrow(sp)),
long = rep(sp$longitude,nrow(data)),
lat = rep(sp$latitude,nrow(data)),
bathy= rep(sp$bathymetry,nrow(data)),
DO = c(t(as.matrix(data))))
detrendingModel <- lm(DO~long+lat+bathy+I(bathy)^2+time+I(time^2),data=myDf)
# detrendingModel <- Tps(DO~Long)
return(list(res=detrendingModel$residuals,detrendingModel=detrendingModel))
}
spatialTemporalKrig <- function(data,locationData,stationName,endTime=as.POSIXct("2014-10-1"),subsample=TRUE){
# data is the
require(geoR)
require(raster)
require(spacetime)
require(gstat)
data <- subset(data,Time<endTime)
myTime <- data$Time
myData <- data[,c(stationName)]
if(subsample){
subseq <- seq(1,nrow(myData),by=6)
myData <- myData[subseq,]
myTime <- myTime[subseq]
}
myLocation <- locationData
# Create the data
DOSeries <- c(t(as.matrix(myData)))
detrendingModel <- detrending(myData,myLocation,myTime)
res <- detrendingModel$res
model <- detrendingModel$detrendingModel
myLocation <- myLocation[,c("longitude","latitude")]
coordinates(myLocation)=~longitude+latitude
projection(myLocation)=CRS("+init=epsg:4326")
myDataFrame <- data.frame(DO=DOSeries,res=res)
timeDF <- STFDF(myLocation,myTime,data=myDataFrame)
return(list(timeDF=timeDF,detrendingModel=detrendingModel))
}
data  <- list()
for(i in 1:nrow(meta_B)){
loggerID <- meta_B[i,"loggerID"]
sql <- paste("select logger, date(Time) as Time, AVG(DO) as DO_avg from loggerData where logger=",loggerID," AND Time < '2014-10-09' AND Time > '2014-06-25' Group by date(Time)")
res <- dbGetQuery(conn,sql)
data[[paste("logger_",loggerID,sep="")]] <- res$DO_avg
}
data$Time <- as.POSIXct(res$Time)
DO_bottom <- as.data.frame(data)
stationName=paste("logger",meta_B$loggerID,sep="_")
mytimeDFList <- spatialTemporalKrig(DO_bottom,meta_B,stationName,endTime=as.POSIXct("2014-10-31"),subsample=FALSE)
detrending <- function(data,sp,time){
library(fields)
if(ncol(data)!=nrow(sp)){
print("Wrong")
return(0)
}
myDf <- data.frame(time=rep(time,each=nrow(sp)),
long = rep(sp$longitude,nrow(data)),
lat = rep(sp$latitude,nrow(data)),
bathy= rep(sp$bathymetry,nrow(data)),
DO = c(t(as.matrix(data))))
detrendingModel <- lm(DO~long+lat+bathy+I(bathy)^2+time,data=myDf)
# detrendingModel <- Tps(DO~Long)
return(list(res=detrendingModel$residuals,detrendingModel=detrendingModel))
}
mytimeDFList <- spatialTemporalKrig(DO_bottom,meta_B,stationName,endTime=as.POSIXct("2014-10-31"),subsample=FALSE)
detrendingModel <- mytimeDFList$detrendingModel
mytimeDF <- mytimeDFList$timeDF
detrendingModel
summary(detrendingModel)
detrendingModel <- mytimeDFList$detrendingModel
mytimeDF <- mytimeDFList$timeDF
summary(detrendingModel)
detrendingModel
detrendingModel$Model
detrendingModel$detrendingModel
summary(detrendingModel$detrendingModel)
detrending <- function(data,sp,time){
library(fields)
if(ncol(data)!=nrow(sp)){
print("Wrong")
return(0)
}
myDf <- data.frame(time=rep(time,each=nrow(sp)),
long = rep(sp$longitude,nrow(data)),
lat = rep(sp$latitude,nrow(data)),
bathy= rep(sp$bathymetry,nrow(data)),
DO = c(t(as.matrix(data))))
detrendingModel <- lm(DO~long+lat+bathy+I(bathy^2)+time,data=myDf)
# detrendingModel <- Tps(DO~Long)
return(list(res=detrendingModel$residuals,detrendingModel=detrendingModel))
}
detrendingModel <- mytimeDFList$detrendingModel
detrending <- function(data,sp,time){
library(fields)
if(ncol(data)!=nrow(sp)){
print("Wrong")
return(0)
}
myDf <- data.frame(time=rep(time,each=nrow(sp)),
long = rep(sp$longitude,nrow(data)),
lat = rep(sp$latitude,nrow(data)),
bathy= rep(sp$bathymetry,nrow(data)),
DO = c(t(as.matrix(data))))
detrendingModel <- lm(DO~long+lat+bathy+I(bathy^2)+time,data=myDf)
# detrendingModel <- Tps(DO~Long)
return(list(res=detrendingModel$residuals,detrendingModel=detrendingModel))
}
conditionalSim <- function(data, spMeta, grid){
data <- DO_bottom_dailyMean
spMeta <- meta_B[,c("Lat","Long","bathy")]
spMeta$bathy <- ft2meter(spMeta$bathy)
x <- as.matrix(spMeta)
names(grid) <- c("Long","Lat","bathy")
coordinates(spMeta)=~Long+Lat
coordinates(grid)=~Long+Lat
krigData <- spMeta
timeLength <- nrow(data)
require(gridExtra)
for(i in 1:nrow(data)){
print(i)
spMeta$DO <- as.numeric(data[i,1:18])
tps_model<-Tps(x,as.numeric(spMeta$DO),df=10)
tps_model_pred=predict(tps_model,as.data.frame(grid)[,c("Lat","Long","bathy")])
spMeta$res<-tps_model$residuals
v <- variogram(res~bathy+Long+Lat, spMeta)
v <- subset(v,np>3)
# m <- fit.variogram(v)
png(paste("./variogram/day",i,".png",sep="_"),width=800,height=800)
p1 <- plot(variogram(res~bathy+Long+Lat, spMeta,cloud=T),plot.numbers = TRUE)
p2 <- plot(variogram(DO~bathy+Long+Lat, spMeta,cloud=T),plot.numbers = TRUE)
p3 <- plot(variogram(res~bathy+Long+Lat, spMeta,cressie=T),plot.numbers = TRUE)
p4 <- plot(variogram(DO~bathy+Long+Lat, spMeta,cressie=T),plot.numbers = TRUE)
p5 <- plot(variogram(res~bathy+Long+Lat, spMeta,cressie=F),plot.numbers = TRUE)
p6 <- plot(variogram(DO~bathy+Long+Lat, spMeta,cressie=F),plot.numbers = TRUE)
grid.arrange(p1,p2,p3,p4,p5,p6,ncol=2)
dev.off()
# sim <- krige(DO~Long+Lat+bathy, spMeta, grid, model = m, nmax = 15, beta = 5.9, nsim = 100)
# krige(DO,sp_data,grid)$var1.pred
}
}
spatialTemporalKrig <- function(data,locationData,stationName,endTime=as.POSIXct("2014-10-1"),subsample=TRUE){
# data is the
require(geoR)
require(raster)
require(spacetime)
require(gstat)
data <- subset(data,Time<endTime)
myTime <- data$Time
myData <- data[,c(stationName)]
if(subsample){
subseq <- seq(1,nrow(myData),by=6)
myData <- myData[subseq,]
myTime <- myTime[subseq]
}
myLocation <- locationData
# Create the data
DOSeries <- c(t(as.matrix(myData)))
detrendingModel <- detrending(myData,myLocation,myTime)
res <- detrendingModel$res
model <- detrendingModel$detrendingModel
myLocation <- myLocation[,c("longitude","latitude")]
coordinates(myLocation)=~longitude+latitude
projection(myLocation)=CRS("+init=epsg:4326")
myDataFrame <- data.frame(DO=DOSeries,res=res)
timeDF <- STFDF(myLocation,myTime,data=myDataFrame)
return(list(timeDF=timeDF,res=res,detrendingModel=model))
}
mytimeDFList <- spatialTemporalKrig(DO_bottom,meta_B,stationName,endTime=as.POSIXct("2014-10-31"),subsample=FALSE)
mytimeDFList$detrendingModel
summary(mytimeDFList$detrendingModel)
mytimeDF <- mytimeDFList$timeDF
mytimeDF
res_vST<- variogramST(res~1,data=mytimeDF,tunit="days",assumeRegular=T,na.omit=T,tlags=0:15,progress=T)
plot(res_vST)
plot(res_vST,map=F)
mytimeDF
res_vST<- variogramST(DO~long+lat+bathy+I(bathy^2)+time,data=mytimeDF,tunit="days",assumeRegular=T,na.omit=T,tlags=0:15,progress=T)
res_vST<- variogramST(DO~longitude+latitude+bathymetry+I(bathymetry^2)+time,data=mytimeDF,tunit="days",assumeRegular=T,na.omit=T,tlags=0:15,progress=T)
head(data)
head(meta_B)
res_vST<- variogramST(DO~longitude+latitude+time,data=mytimeDF,tunit="days",assumeRegular=T,na.omit=T,tlags=0:15,progress=T)
plot(res_vST,map=F)
hist(mytimeDFList$res)
qqplot(res)
qqplot(mytimeDFList$res)
hist(log(mytimeDFList$res))
res_vST<- variogramST(DO~longitude+latitude,data=mytimeDF,tunit="days",assumeRegular=T,na.omit=T,tlags=0:15,progress=T)
plot(res_vST)
plot(res_vST,map=F)
res_vST<- variogramST(DO~longitude+latitude,data=mytimeDF,assumeRegular=T,na.omit=T,tlags=0:15,progress=F)
plot(res_vST)
plot(res_vST,map=F)
res_vST<- variogramST(res~1,data=mytimeDF,assumeRegular=T,na.omit=T,tlags=0:15,progress=F)
res_vST<- variogramST(res~1,data=mytimeDF,assumeRegular=T,na.omit=T,tlags=0:15,progress=T)
pars.l <- c(sill.s = 0, range.s = 10, nugget.s = 0,sill.t = 0, range.t = 1, nugget.t = 0,sill.st = 0, range.st = 10, nugget.st = 0, anis = 0)
pars.u <- c(sill.s = 200, range.s = 1000, nugget.s = 100,sill.t = 200, range.t = 60, nugget.t = 100,sill.st = 200, range.st = 1000, nugget.st = 100,anis = 700)
separable <- vgmST("separable", space = vgm(-60,"Sph", 500, 1),time = vgm(35,"Sph", 500, 1), sill=0.56)
sumMetric <- vgmST("sumMetric", space = vgm(psill=5,"Sph", range=500, nugget=0),time = vgm(psill=500,"Sph", range=500, nugget=0), joint = vgm(psill=1,"Sph", range=500, nugget=10), stAni=500)
separable_Vgm <- fit.StVariogram(res_vST, separable, fit.method=10)
sumMetric_Vgm <- fit.StVariogram(var, sumMetric, method="L-BFGS-B",lower=pars.l,upper=pars.u,tunit="days")
plot(res_vST, list(sumMetric_Vgm),map=FALSE)
separable <- vgmST("separable", space = vgm(-60,"Sph", 500, 1),time = vgm(35,"Sph", 500, 1), sill=0.56)
sumMetric <- vgmST("sumMetric", space = vgm(psill=5,"Sph", range=500, nugget=0),time = vgm(psill=500,"Sph", range=500, nugget=0), joint = vgm(psill=1,"Sph", range=500, nugget=10), stAni=500)
separable_Vgm <- fit.StVariogram(res_vST, separable, fit.method=10)
sumMetric_Vgm <- fit.StVariogram(var, sumMetric, method="L-BFGS-B",lower=pars.l,upper=pars.u,tunit="days")
res_vST<- variogramST(res~1,data=mytimeDF,tunit="days",assumeRegular=T,na.omit=T,tlags=0:15,progress=T)
warnings()
sumMetric_Vgm <- fit.StVariogram(var, sumMetric, method="L-BFGS-B",lower=pars.l,upper=pars.u,tunit="days")
res_vST<- variogramST(res~1,data=mytimeDF,assumeRegular=T,na.omit=T,tlags=0:15,progress=T)
separable_Vgm <- fit.StVariogram(res_vST, separable, fit.method=10)
sumMetric_Vgm <- fit.StVariogram(res_vST, sumMetric, method="L-BFGS-B",lower=pars.l,upper=pars.u)
plot(res_vST, list(sumMetric_Vgm),map=FALSE)
getwd()
i=1
print(i)
loggerID <- meta_B[i,"loggerID"]
loggerInfo <- meta_B[i,c("longitude","latitude","bathymetry")]
sql <- paste("select logger, Time, DO from loggerData where logger=",loggerID," AND Time < '2014-10-09' AND Time > '2014-06-25'")
series <- dbGetQuery(conn,sql)
timeSeries <- as.POSIXct(series$Time)
myGrid <- data.frame(long=rep(loggerInfo$longitude,length(timeSeries)),lat=rep(loggerInfo$latitude,length(timeSeries)),bathy=rep(loggerInfo$bathymetry),time=timeSeries)
myGrid
head(myGrid)
trend <- predict(detrendingModel$detrendingModel,myGrid)
for(i in 1:nrow(meta_B)){
print(i)
loggerID <- meta_B[i,"loggerID"]
loggerInfo <- meta_B[i,c("longitude","latitude","bathymetry")]
sql <- paste("select logger, Time, DO from loggerData where logger=",loggerID," AND Time < '2014-10-09' AND Time > '2014-06-25'")
series <- dbGetQuery(conn,sql)
timeSeries <- as.POSIXct(series$Time)
# length(timeSeries)
myGrid <- data.frame(long=rep(loggerInfo$longitude,length(timeSeries)),lat=rep(loggerInfo$latitude,length(timeSeries)),bathy=rep(loggerInfo$bathymetry),time=timeSeries)
trend <- predict(detrendingModel$detrendingModel,myGrid)
cat("trending finished \n")
spGrid <- data.frame(longitude=loggerInfo$longitude,latitude=loggerInfo$latitude)
coordinates(spGrid)=~longitude+latitude
projection(spGrid)=CRS("+init=epsg:4326")
grid.ST <- STF(spGrid,timeSeries)
pred <- krigeST(res~1, data=mytimeDF, modelList=sumMetric_Vgm, newdata=grid.ST,computeVar = T)
pred_res <- pred@data$var1.pred
pred_var <- pred@data$var1.var
cat("res interpolation finished \n")
finalPred <- data.frame(time=timeSeries,pred=pred_res+trend,var=pred_var,obs=series$DO)
p1 <- qplot(time,pred,data=finalPred)+geom_point(aes(time,obs),data=finalPred,color="red")+geom_line(aes(time,pred+pred_var^0.5),data=finalPred)+geom_line(aes(time,pred-pred_var^0.5),data=finalPred)+ggtitle(loggerID)+ylim(c(0,13))
png(paste("stKrig_",loggerID,".png",sep=""),width=1000,height=800)
print(p1)
dev.off()
}
library(ggplot2)
for(i in 1:nrow(meta_B)){
print(i)
loggerID <- meta_B[i,"loggerID"]
loggerInfo <- meta_B[i,c("longitude","latitude","bathymetry")]
sql <- paste("select logger, Time, DO from loggerData where logger=",loggerID," AND Time < '2014-10-09' AND Time > '2014-06-25'")
series <- dbGetQuery(conn,sql)
timeSeries <- as.POSIXct(series$Time)
# length(timeSeries)
myGrid <- data.frame(long=rep(loggerInfo$longitude,length(timeSeries)),lat=rep(loggerInfo$latitude,length(timeSeries)),bathy=rep(loggerInfo$bathymetry),time=timeSeries)
trend <- predict(detrendingModel$detrendingModel,myGrid)
cat("trending finished \n")
spGrid <- data.frame(longitude=loggerInfo$longitude,latitude=loggerInfo$latitude)
coordinates(spGrid)=~longitude+latitude
projection(spGrid)=CRS("+init=epsg:4326")
grid.ST <- STF(spGrid,timeSeries)
pred <- krigeST(res~1, data=mytimeDF, modelList=sumMetric_Vgm, newdata=grid.ST,computeVar = T)
pred_res <- pred@data$var1.pred
pred_var <- pred@data$var1.var
cat("res interpolation finished \n")
finalPred <- data.frame(time=timeSeries,pred=pred_res+trend,var=pred_var,obs=series$DO)
p1 <- qplot(time,pred,data=finalPred)+geom_point(aes(time,obs),data=finalPred,color="red")+geom_line(aes(time,pred+pred_var^0.5),data=finalPred)+geom_line(aes(time,pred-pred_var^0.5),data=finalPred)+ggtitle(loggerID)+ylim(c(0,13))
png(paste("stKrig_",loggerID,".png",sep=""),width=1000,height=800)
print(p1)
dev.off()
}
warnings()
loggerID=10384436
sql <- paste("select logger, Time, DO from loggerData where logger=",loggerID," AND Time < '2014-10-09' AND Time > '2014-06-25'")
series <- dbGetQuery(conn,sql)
timeSeries <- as.POSIXct(series$Time)
plot(timeSeries)
?diff
summary(diff(timeSeries))
diff(timeSeries)
var(diff(timeSeries))
myGrid <- data.frame(long=rep(loggerInfo$longitude,length(timeSeries)),lat=rep(loggerInfo$latitude,length(timeSeries)),bathy=rep(loggerInfo$bathymetry),time=timeSeries)
trend <- predict(detrendingModel$detrendingModel,myGrid)
cat("trending finished \n")
spGrid <- data.frame(longitude=loggerInfo$longitude,latitude=loggerInfo$latitude)
coordinates(spGrid)=~longitude+latitude
projection(spGrid)=CRS("+init=epsg:4326")
grid.ST <- STF(spGrid,timeSeries)
pred <- krigeST(res~1, data=mytimeDF, modelList=sumMetric_Vgm, newdata=grid.ST,computeVar = T)
pred_res <- pred@data$var1.pred
pred_var <- pred@data$var1.var
plot(pred_var)
plot(pred_res)
qplot(time,pred,data=finalPred)+geom_point(aes(time,obs),data=finalPred,color="red")+geom_point(aes(time,pred+pred_var^0.5),data=finalPred)+geom_line(aes(time,pred-pred_var^0.5),data=finalPred)+ggtitle(loggerID)+ylim(c(0,13))
qplot(time,pred,data=finalPred)+geom_point(aes(time,obs),data=finalPred,color="red")+geom_point(aes(time,pred+pred_var^0.5),data=finalPred)+geom_poing(aes(time,pred-pred_var^0.5),data=finalPred)+ggtitle(loggerID)+ylim(c(0,13))
qplot(time,pred,data=finalPred)+geom_point(aes(time,obs),data=finalPred,color="red")+geom_point(aes(time,pred+pred_var^0.5),data=finalPred)+geom_point(aes(time,pred-pred_var^0.5),data=finalPred)+ggtitle(loggerID)+ylim(c(0,13))
？optim
??optim
p2 <- qplot(time,pred,data=finalPred)+geom_point(aes(time,obs),data=finalPred,color="red")+geom_point(aes(time,pred+pred_var^0.5),data=finalPred,color="blue")+geom_point(aes(time,pred-pred_var^0.5),data=finalPred,color="red")+ggtitle(loggerID)+ylim(c(0,13))
p2
summary(pred_var)
qplot(pred-pred_var^0.5,pred+pred_var^0.5,data=finalPred)
qplot(time,pred,data=finalPred)+geom_point(aes(time,obs),data=finalPred,color="red")+geom_point(aes(time,pred+pred_var^0.5),data=finalPred,color="blue")+geom_point(aes(time,pred-pred_var^0.5),data=finalPred,color="green")+ggtitle(loggerID)+ylim(c(0,13))
qplot(time,pred,data=finalPred)+geom_point(aes(time,pred+pred_var^0.5),data=finalPred,color="blue")+geom_point(aes(time,pred-pred_var^0.5),data=finalPred,color="green")+ggtitle(loggerID)+ylim(c(0,13))
plot(finalPred$pred)
?plot
plot(finalPred$pred,type="l")
library(dygraphs)
library(zoo)
?zoo
finalPred2 <- zoo(finalPred[,-1],order.by=timeSeries)
dygraph(finalPred2, main = "New Haven Temperatures") %>% dyRangeSelector()
time
timeSeries[1]
ls
library(shiny); print(source('Developer/DO_visualization/test.R')$value)
print(source('Developer/DO_visualization/test.R')$value)
print(source('Developer/DO_visualization/test.R')$value)
print(source('Developer/DO_visualization/test.R')$value)
print(source('Developer/DO_visualization/test.R')$value)
shiny::runApp('Developer/Triaxus_Shiny')
?rgamma
shiny::runApp('Developer/DO_visualization')
a <- read.csv("/Users/WenzhaoXu/Developer/Triaxus_Shiny/testFile/Manitowoc_01.csv")
head(a)
library(ggplot2)
qplot(distance,depth.1,color=total,data=a)
qplot(Distance,depth.1,color=total,data=a)
qplot(Distance,-depth.1,color=total,data=a)+scale_color_gradientn(color=topo.colors(10))
qplot(Distance,-depth.1,color=total,data=a)+scale_color_gradientn(colours = topo.colors(10))
main("./testFile/newFile/Manitowoc_03.csv",oldResult,6409,6370,c(3120,6360))
getwd()
shiny::runApp('Developer/Triaxus/TriaxusCode/src')
runApp('Developer/Triaxus/TriaxusCode/src')
runApp('Developer/Triaxus/TriaxusCode/src')
getwd()
setwd("~/Developer/Seabird/SeabirdCode/analysis/")
feature <- read.csv("../../output/testFeature.csv")
validStation <- read.csv("../../input/station_loc.csv")
head(feature)
validStation$Station <- as.character(validStation$Station)
validStation$bathymetry <- retriveBathyMetriy(validStation,"./superior_lld/superior_lld.asc")
feature$lake <- addLake(feature$site)
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
source('~/Developer/Seabird/SeabirdCode/analysis/main.R')
head(feature)
dataSet <- feature[feature$hasError<1,c("DCL_depth","DCL_peakNum","LEP_segment","THM_segment","UHY_segment","num_segment")]
head(dataSet)
dataSet <- feature[feature$hasError<1,c("site","year","DCL_depth","DCL_peakNum","LEP_segment","THM_segment","UHY_segment","num_segment")]
dataSet <- feature[feature$hasError<1,c("site","year","lake","DCL_depth","DCL_peakNum","LEP_segment","THM_segment","UHY_segment","num_segment")]
head(dataSet)
dataSet <- feature[feature$hasError<1,c("site","year","lake","DCL_depth","DCL_peakNum","DCL_magnitude","DCL_magnitude_bottomBoundary","DCL_magnitude_upperBoundary","LEP_segment","THM_segment","UHY_segment","num_segment")]
head(dataSet)
install.packages("kohenen")
install.packages("kohonen")
library("kohonen")
head(dataSet)
max(dataSet$year)
data_train <- dataSet[dataSet$year<2012,4:12]
data_train_matrix <- as.matrix(scale(data_train))
som_grid <- somgrid(xdim = 20, ydim=20, topo="hexagonal")
som_model <- som(data_train_matrix,
grid=som_grid,
rlen=100,
alpha=c(0.05,0.01),
keep.data = TRUE,
n.hood=“circular” )
som_model <- som(data_train_matrix,
grid=som_grid,
rlen=100,
alpha=c(0.05,0.01),
keep.data = TRUE,
n.hood="circular")
som_model
print(som_model)
plot(som_model)
plot(som_model,type="chages")
plot(som_model,type="changes")
plot(som_model,typ="count")
plot(som_model,type="property",property=num_segment)
plot(som_model,type="property",property="num_segment")
summary(som_model)
plot(som_model,type="property",property=var_unscaled)
plot(som_model)
head(dataSet)
d <- dist(as.matrix(dataSet[,4:12]))
head(d)
hc <- hclust(d)
plot(hc)
dataSet[1408,]
data_test <- dataSet[dataSet$year>2011,4:12]
somPrediction <- predict(som_model,data_test)
somPrediction <- predict(som_model,na.omit(data_test))
somPrediction <- predict(som_model,newdata <- data_test)
plot(som_model, type = "property", property = som_model$codes[,4], main=names(som_model$data)[4], palette.name=coolBlueHotRed)
plot(som_model, type = "property", property = som_model$codes[,4], main=names(som_model$data)[4])
names(som_model$data)[4]
names(som_model$data)[1]
names(som_model$data)[2]
names(som_model$data)[3]
head(data_train)
data_train_matrix <- as.matrix(scale(data_train))
head(data_train_matrix)
som_model <- som(data_train_matrix,
grid=som_grid,
rlen=100,
alpha=c(0.05,0.01),
keep.data = TRUE,
n.hood="circular" )
names(som_model$data)[1]
names(som_model$data)[2]
names(som_model$data[2])
head(som_model$data)
names(som_model$data)
rownames(som_model$data)
colnames(som_model$data)
plot(som_model, type = "property", property = som_model$codes[,4], main=colnames(som_model$data)[4])
plot(som_model, type = "property", property = som_model$codes[,4], main=colnames(som_model$data)[1])
plot(som_model, type = "property", property = som_model$codes[,4], main=colnames(som_model$data)[2])
plot(som_model, type = "property", property = som_model$codes[,4], main=colnames(som_model$data)[3])
plot(som_model, type = "property", property = som_model$codes[,4], main=colnames(som_model$data)[4])
plot(som_model, type = "property", property = som_model$codes[,4], main=colnames(som_model$data)[5])
plot(som_model, type = "property", property = som_model$codes[,4], main=colnames(som_model$data)[6])
i=1
plot(som_model, type = "property", property = som_model$codes[,i], main=colnames(som_model$data)[i])
som_model$codes[,i]
head(data_train)
?som
train_lakes <- dataSet[dataSet$year<2012,"lake"]
train_year <- dataSet[dataSet$year<2012,"year"]
plot(som_model, type = "property", property = train_lakes, main=colnames(som_model$data)[i])
plot(som_model, type = "property", property = som_model$codes[,i], main=colnames(som_model$data)[i])
i=2
plot(som_model, type = "property", property = som_model$codes[,i], main=colnames(som_model$data)[i])
i=3
plot(som_model, type = "property", property = som_model$codes[,i], main=colnames(som_model$data)[i])
i=4
plot(som_model, type = "property", property = som_model$codes[,i], main=colnames(som_model$data)[i])
i=5
plot(som_model, type = "property", property = som_model$codes[,i], main=colnames(som_model$data)[i])
i=6
plot(som_model, type = "property", property = som_model$codes[,i], main=colnames(som_model$data)[i])
i=7
plot(som_model, type = "property", property = som_model$codes[,i], main=colnames(som_model$data)[i])
i=8
plot(som_model, type = "property", property = som_model$codes[,i], main=colnames(som_model$data)[i])
i=9
plot(som_model, type = "property", property = som_model$codes[,i], main=colnames(som_model$data)[i])
dim(data_train)
som_cluster <- cutree(hclust(dist(som_model$codes)),
som_cluster <- cutree(hclust(dist(som_model$codes)),6)
plot(som_cluster)
mydata <- som_model$codes
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) {
wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
}
plot(wss)
lot(som_model, type="mapping", bgcol = pretty_palette[som_cluster], main = "Clusters")
add.cluster.boundaries(som_model, som_cluster)
dev.off()
dev.off()
som_cluster <- cutree(hclust(dist(som_model$codes)), 6)
plot(som_model, type="mapping", bgcol = pretty_palette[som_cluster], main = "Clusters");add.cluster.boundaries(som_model, som_cluster)
plot(som_model, type="mapping", main = "Clusters");add.cluster.boundaries(som_model, som_cluster)
plot(som_model, type="mapping", bgcol = topo.colors(10)[som_cluster], main = "Clusters");add.cluster.boundaries(som_model, som_cluster)
plot(som_model, type="mapping", bgcol = topo.colors(1)[som_cluster], main = "Clusters");add.cluster.boundaries(som_model, som_cluster)
plot(som_model, type="mapping", bgcol = topo.colors(100)[som_cluster], main = "Clusters");add.cluster.boundaries(som_model, som_cluster)
plot(som_model, type="mapping", bgcol = topo.colors(5)[som_cluster], main = "Clusters");add.cluster.boundaries(som_model, som_cluster)
